<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Oak_Zmm的技术博客]]></title>
  <subtitle><![CDATA[所有的酒，都不如你。]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://oakzmm.com//"/>
  <updated>2017-01-18T09:04:15.344Z</updated>
  <id>http://oakzmm.com//</id>
  
  <author>
    <name><![CDATA[Oak_Zmm]]></name>
    <email><![CDATA[macouen@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Cool Android Apis 整理（三）]]></title>
    <link href="http://oakzmm.com/2015/09/07/cool-android-api-3/"/>
    <id>http://oakzmm.com/2015/09/07/cool-android-api-3/</id>
    <published>2015-09-07T02:00:39.000Z</published>
    <updated>2017-01-18T09:04:15.344Z</updated>
    <content type="html"><![CDATA[<h2 id="Foreword">Foreword</h2><p>本文主要整理 <code>Cool Android Apis</code>。<br>这是这个系列的第三篇，第一篇 <a href="http://oakzmm.com/2015/08/04/cool-Android-api/" target="_blank" rel="external">Cool Android Apis 整理（一）</a>，第二篇 <a href="http://oakzmm.com/2015/08/11/cool-Android-api-2/" target="_blank" rel="external">Cool Android Apis 整理（二）</a> 。<br>非常抱歉，由于工作的原因，第三篇隔了很久才发 （写博客果然不是一件容易的事）。</p>
<blockquote>
<p>整理来源 </p>
<ul>
<li><p><code>Dan Lew</code> 的<a href="http://blog.danlew.net/2014/03/30/android-tips-round-up-part-1/" target="_blank" rel="external">Android Tips Round-Up</a> 系列文章。<br>尤其感谢 <a href="http://www.jianshu.com/users/FK4sc4/latest_articles" target="_blank" rel="external">Gracker</a> 对上面系列文章的 <a href="http://www.jianshu.com/notebooks/571559/latest" target="_blank" rel="external">翻译和部分解释</a>。</p>
</li>
<li><p>知乎问题：<a href="http://www.zhihu.com/question/33636939" target="_blank" rel="external">Android开发中，有哪些让你觉得相见恨晚的方法、类或接口？</a> </p>
</li>
</ul>
</blockquote>
<a id="more"></a>  
<h2 id="Content">Content</h2><ul>
<li><h3 id="&lt;_include_/&gt;、&lt;_merge_/&gt;、_&lt;_ViewStub_/&gt;_标签"><a href="http://developer.android.com/intl/zh-cn/training/improving-layouts/reusing-layouts.html#Create" target="_blank" rel="external">&lt; include /&gt;、&lt; merge /&gt;、</a> <a href="http://developer.android.com/intl/zh-cn/reference/android/view/ViewStub.html" target="_blank" rel="external">&lt; ViewStub /&gt;</a> 标签</h3></li>
</ul>
<p>这三个布局标签，都是起到布局优化的作用。</p>
<p><strong> <code>&lt; include /&gt;</code> 重用布局文件 </strong><br>这个大家应该使用还是比较多的。<br>这里还有几个小tip:<br>1.&lt; include /&gt;标签可以只使用layout属性，这个也是必须使用的。<br>2.&lt; include /&gt;标签若指定了ID属性，而你的layout也定义了ID，则你的layout的ID会被覆盖，同样的在include标签中所有的android:layout_* 属性都是可以覆盖使用的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;include android:layout_width=<span class="string">"fill_parent"</span> layout=<span class="string">"@layout/image_holder"</span> /&gt;</span><br><span class="line">&lt;include android:layout_width=<span class="string">"256dip"</span> layout=<span class="string">"@layout/image_holder"</span> /&gt;</span><br></pre></td></tr></table></figure>
<p><strong>  <code>&lt; merge /&gt;</code>  减少视图层级 </strong></p>
<p>&lt; merge/&gt;标签在UI的结构优化中起着非常重要的作用，它可以删减多余的层级。<merge>多用于替换FrameLayout或者当一个布局包含另一个时，&lt; merge/&gt;标签消除视图层次结构中多余的视图组。例如你的主布局文件是垂直布局，引入了一个垂直布局的include，这是如果include布局使用的LinearLayout就没意义了。这时我们就可以使用&lt; merge/&gt;标签优化。</merge></p>
<p>单独的这么说可能比较抽象，大家可以看下这篇blog <a href="http://android-developers.blogspot.com/2009/03/android-layout-tricks-3-optimize-by.html" target="_blank" rel="external">Android Layout Tricks #3: Optimize by merging</a> 加深理解。</p>
<p><strong> <code>&lt; ViewStub /&gt;</code> 需要的时候加载 </strong></p>
<blockquote>
<p>A ViewStub is an invisible, zero-sized View that can be used to lazily inflate layout resources at runtime. </p>
</blockquote>
<p>&lt; ViewStub /&gt;标签最大的优点是当你需要时才会加载，使用他并不会影响UI初始化时的性能。各种不常用的布局比如进度条、显示占位信息等可以使用&lt; ViewStub /&gt;标签，以减少内存使用量，加快渲染速度。&lt; ViewStub /&gt;是一个不可见的，大小为0的View。</p>
<p>For instance:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;ViewStub </span><br><span class="line">	android:id=<span class="string">"@+id/stub"</span></span><br><span class="line">	android:inflatedId=<span class="string">"@+id/subTree"</span></span><br><span class="line">	android:layout=<span class="string">"@layout/mySubTree"</span></span><br><span class="line">	android:layout_width=<span class="string">"120dip"</span></span><br><span class="line">	android:layout_height=<span class="string">"40dip"</span> /&gt;</span><br></pre></td></tr></table></figure>
<p>当调用 <code>setVisibility(int)</code> or <code>inflate()</code> 时，布局就会加载。</p>
<p>更多信息：<a href="http://android-developers.blogspot.com/2009/03/android-layout-tricks-3-optimize-with.html" target="_blank" rel="external">Android Layout Tricks #3: Optimize with stubs </a></p>
<ul>
<li><h3 id="ViewAnimator"><a href="http://developer.android.com/intl/zh-cn/reference/android/widget/ViewAnimator.html" target="_blank" rel="external">ViewAnimator</a></h3></li>
</ul>
<p>我们先来看下继承关系：<br><img src="/image/api05.jpg" alt="Bitmap"><br>可以看到<code>ViewAnimator</code> 继承自<code>FrameLayout</code> ，那么也就是会说<code>ViewAnimator</code> 具有<code>FrameLayout</code>的特性，可以将多个View组件叠在一起，然后还能够处理views切换时的动画效果。<br>但是这里不对<code>ViewAnimator</code>做更多的讲解，我们来看他的子类来了解更多，来理解这个类以及子类到底能够起到一个什么样的作用，而且我感觉在后面的Android的版本更新中这几个类就可能会过时。</p>
<ul>
<li><h4 id="View_Flipper"><strong> <a href="http://developer.android.com/intl/zh-cn/reference/android/widget/ViewFlipper.html" target="_blank" rel="external">View Flipper</a> </strong></h4></li>
</ul>
<p>通过add(View view)向内部添加多个组件，再使用动画控制多个组件之间的切换效果,而且能够自动执行切换。<br>与ViewPager有相似之处，ViewPager长于使用手势滑动进行页面切换。ViewFlipper长于实现子界面的自动切换。</p>
<p>向ViewFlipper 加入View：<br>静态导入：在layout布局中直接导入（不推荐，不灵活）:<br><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">&lt;ViewFlipper</span><br><span class="line">    <span class="keyword">...</span>&gt;</span><br><span class="line">    &lt; ImageView</span><br><span class="line">          <span class="keyword">...</span> /&gt;</span><br><span class="line">    &lt;ImageView</span><br><span class="line">          <span class="keyword">...</span> /&gt;</span><br><span class="line">    &lt;ImageView</span><br><span class="line">          <span class="keyword">...</span> /&gt;</span><br><span class="line">&lt;/ViewFlipper&gt;</span><br></pre></td></tr></table></figure></p>
<p>动态导入： addView()方法。</p>
<p>这里给大家列出几个常用方法和使用demo。</p>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">setInAnimation</td>
<td style="text-align:left">设置View进入屏幕时使用的动画</td>
</tr>
<tr>
<td style="text-align:left">setOutAnimation</td>
<td style="text-align:left">设置View退出屏幕时使用的动画</td>
</tr>
<tr>
<td style="text-align:left">showNext</td>
<td style="text-align:left">调用函数来显示ViewFlipper里的下一张View</td>
</tr>
<tr>
<td style="text-align:left">showPrevious</td>
<td style="text-align:left">调用函数来显示ViewFlipper里的上一张View</td>
</tr>
<tr>
<td style="text-align:left">setFilpInterval</td>
<td style="text-align:left">设置View之间切换的时间间隔</td>
</tr>
<tr>
<td style="text-align:left">startFlipping</td>
<td style="text-align:left">开始View自动播放</td>
</tr>
<tr>
<td style="text-align:left">stopFlipping</td>
<td style="text-align:left">停止View播放</td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">   flipper = (ViewFlipper) findViewById(R.id.flipper);</span><br><span class="line">   <span class="comment">//动态导入的方式为ViewFlipper加入View</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt; res.length; i++)&#123;</span><br><span class="line">       flipper.addView(getImageView(res[i]));</span><br><span class="line">｝</span><br><span class="line">flipper.setInAnimation(<span class="keyword">this</span>, R.anim.push_right_in);</span><br><span class="line">flipper.setOutAnimation(<span class="keyword">this</span>, R.anim.push_right_out);</span><br><span class="line">flipper.setFlipInterval(<span class="number">3000</span>);</span><br><span class="line">flipper.setBackgroundColor(Color.BLACK);</span><br><span class="line">flipper.startFlipping();</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">   <span class="function"><span class="keyword">private</span> ImageView <span class="title">getImageView</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">       ImageView imageView = <span class="keyword">new</span> ImageView(<span class="keyword">this</span>);</span><br><span class="line">       imageView.setImageResource(id);</span><br><span class="line">		imageView.setScaleType(ImageView.ScaleType.FIT_XY);</span><br><span class="line">       <span class="keyword">return</span> imageView;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><h4 id="ViewSwitcher"><strong> <a href="http://developer.android.com/intl/zh-cn/reference/android/widget/ViewSwitcher.html" target="_blank" rel="external">ViewSwitcher</a> </strong></h4>  | — <a href="http://developer.android.com/intl/zh-cn/reference/android/widget/ImageSwitcher.html" target="_blank" rel="external">ImageSwitcher</a><br>  | — <a href="http://developer.android.com/intl/zh-cn/reference/android/widget/TextSwitcher.html" target="_blank" rel="external">TextSwitcher</a></li>
</ul>
<blockquote>
<p>A ViewSwitcher can only have two child views, of which only one is shown at a time. </p>
</blockquote>
<p>当我在官方文档看到这个的时候基本感觉无爱了，因为这个限制，使用场景就很有限了，但是还是不能排除有合适的应用场景。<br>用法上呢， 其实和 View Flipper 有点相似，但是有个了一个 <code>setFactory</code> 的，当然本质还是<code>addView（）</code> 但是得多了对 <code>LayoutParams</code> 的默认处理。<br>在实际中可能 <code>ImageSwitcher</code> , <code>TextSwitcher</code> 使用要比 <code>ViewSwitcher</code> 更多一些。<br>上一个<code>TextSwitcher</code>的demo。<br>xml：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;TextSwitcher</span><br><span class="line">       android:id="@+id/profileSwitcher"</span><br><span class="line">       android:layout_width="fill_parent"</span><br><span class="line">       android:layout_height="wrap_content"</span><br><span class="line">       android:layout_marginTop="10dp"</span><br><span class="line">       android:background="@color/border_gray"</span><br><span class="line">       android:inAnimation="@anim/push_up_in"</span><br><span class="line">       android:minHeight="30dp"</span><br><span class="line">       android:outAnimation="@anim/push_up_out"&gt;&lt;/TextSwitcher&gt;</span><br></pre></td></tr></table></figure>
<p>java:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">textSwitcher.setFactory(<span class="keyword">this</span>);</span><br><span class="line">textSwitcher = (TextSwitcher) findViewById(R.id.profileSwitcher);</span><br><span class="line">textSwitcher.setFactory(<span class="keyword">this</span>);</span><br><span class="line">Looper looper = Looper.myLooper();</span><br><span class="line">bitHandler = <span class="keyword">new</span> bitHandler(looper);</span><br><span class="line"><span class="keyword">new</span> myThread().start();</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"> <span class="annotation">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> View <span class="title">makeView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       TextView textView = <span class="keyword">new</span> TextView(<span class="keyword">this</span>);</span><br><span class="line">       textView.setSingleLine();</span><br><span class="line">       textView.setTextSize(<span class="number">15</span>);</span><br><span class="line">       textView.setEllipsize(TextUtils.TruncateAt.END);</span><br><span class="line">       FrameLayout.LayoutParams lp = <span class="keyword">new</span> FrameLayout.LayoutParams(</span><br><span class="line">               ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT</span><br><span class="line">       );</span><br><span class="line">       lp.gravity = Gravity.CENTER;</span><br><span class="line">       textView.setLayoutParams(lp);</span><br><span class="line">       <span class="keyword">return</span> textView;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//---这么写并不好，只是个demo，大家凑合看吧---//</span></span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">bitHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">bitHandler</span><span class="params">(Looper looper)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">super</span>(looper);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="annotation">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">           textSwitcher.setText(strings[index]);</span><br><span class="line">           index++;</span><br><span class="line">           <span class="keyword">if</span> (index == strings.length) &#123;</span><br><span class="line">               index = <span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">myThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">       <span class="annotation">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">super</span>.run();</span><br><span class="line">           <span class="keyword">while</span> (index &lt; strings.length) &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                       bitHandler.sendEmptyMessage(<span class="number">0</span>);</span><br><span class="line">                       <span class="keyword">this</span>.sleep(<span class="number">4000</span>);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<p>效果图：<br><img src="/image/api06.gif" alt="Bitmap"></p>
<hr>
<p>view属性部分</p>
<ul>
<li><h3 id="android:weightSum_(LinearLayout)">android:weightSum (LinearLayout)</h3></li>
</ul>
<p>如果想使用 layout weights，但是却不想填充整个 LinearLayout 的话，就可以用 weightSum 来定义总的 weight 大小。</p>
<ul>
<li><h3 id="android:descendantFocusability（ViewGroup）">android:descendantFocusability（ViewGroup）</h3></li>
</ul>
<p>在使用ListView时，当item中有Button、CheckBox、RadioButton、TextView等组件时，我们通常会遇到listview的每一项无法响应点击的问题，因为消息还没传回每一项的viewgroup就被其子view消费了。<br>我们可以通过为该ViewGroup设置“android:descendantFocusability”属性来强制获取焦点，以便能够消费android系统传递过来的消息。“android:descendantFocusability”的详细解释如下图所示：<br><img src="/image/api07.jpg" alt="Bitmap"></p>
<p>属性的值有三种：</p>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">beforeDescendants</td>
<td style="text-align:left">viewgroup会优先其子类控件而获取到焦点</td>
</tr>
<tr>
<td style="text-align:left">afterDescendants</td>
<td style="text-align:left">viewgroup只有当其子类控件不需要获取焦点时才获取焦点</td>
</tr>
<tr>
<td style="text-align:left">blocksDescendants</td>
<td style="text-align:left">viewgroup会覆盖子类控件而直接获得焦点</td>
</tr>
</tbody>
</table>
<ul>
<li><h3 id="android:duplicateParentState（ViewGroup）">android:duplicateParentState（ViewGroup）</h3></li>
</ul>
<p>如果设置此属性，将直接从父容器中获取绘图状态（光标，按下，选中等）。比方说是你点一下LinearLayout时Button有被点击的效果，但是button不是相应点击事件，但是状态却随着LinearLayout变化了。这个简直是神技。。。</p>
<ul>
<li><h3 id="android:fillViewport_(ScrollView)">android:fillViewport (ScrollView)</h3></li>
</ul>
<p>解决在 ScrollView 中当内容不足的时候填不满屏幕的问题。<br>想了解更多,点击 <a href="http://www.curious-creature.com/2010/08/15/scrollviews-handy-trick/" target="_blank" rel="external">ScrollView’s handy trick</a></p>
<ul>
<li><h3 id="android:scaleType_(ImageView)">android:scaleType (ImageView)</h3></li>
</ul>
<p>定义在 ImageView 中怎么缩放/剪裁图片，ImageView.ScaleType共八种：</p>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ImageView.ScaleType.CENTER</td>
<td style="text-align:left">图片位于视图中间，但不执行缩放</td>
</tr>
<tr>
<td style="text-align:left">ImageView.ScaleType.CENTER_CROP</td>
<td style="text-align:left">按统一比例缩放图片（保持图片的尺寸比例）便于图片的两维（宽度和高度）等于或者大于相应的视图的维度</td>
</tr>
<tr>
<td style="text-align:left">ImageView.ScaleType.CENTER_INSIDE</td>
<td style="text-align:left">按统一比例缩放图片（保持图片的尺寸比例）便于图片的两维（宽度和高度）等于或者小于相应的视图的维度</td>
</tr>
<tr>
<td style="text-align:left">ImageView.ScaleType.FIT_CENTER</td>
<td style="text-align:left">缩放图片使用center</td>
</tr>
<tr>
<td style="text-align:left">ImageView.ScaleType.FIT_END</td>
<td style="text-align:left">缩放图片使用END</td>
</tr>
<tr>
<td style="text-align:left">ImageView.ScaleType.FIT_START</td>
<td style="text-align:left">缩放图片使用START</td>
</tr>
<tr>
<td style="text-align:left">ImageView.ScaleType.FIT_XY</td>
<td style="text-align:left">缩放图片使用XY</td>
</tr>
<tr>
<td style="text-align:left">ImageView.ScaleType.MATRIX</td>
<td style="text-align:left">当绘制时使用图片矩阵缩放</td>
</tr>
</tbody>
</table>
<ul>
<li><h3 id="android:imeOptions（EditText）">android:imeOptions（EditText）</h3></li>
</ul>
<p>EditText中使用对键盘的action键（一般是右下角）定制，并且通过监听键盘执行相应的操作，但是<code>imeOptions</code>并 不仅仅局限于此，还有很对对键盘控制的属性，比方在横屏的时候，控制键盘不全屏显示等。感兴趣的可以仔细的阅读下官方文档。<br>部分属性：</p>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">android:imeOptions=”actionNone”</td>
<td style="text-align:left">输入框右侧不带任何提示</td>
</tr>
<tr>
<td style="text-align:left">android:imeOptions=”actionGo”</td>
<td style="text-align:left">右下角按键内容为’开始’</td>
</tr>
<tr>
<td style="text-align:left">android:imeOptions=”actionSearch”</td>
<td style="text-align:left">右下角按键为搜索</td>
</tr>
<tr>
<td style="text-align:left">android:imeOptions=”actionSend”</td>
<td style="text-align:left">右下角按键内容为’发送’</td>
</tr>
<tr>
<td style="text-align:left">android:imeOptions=”actionPrevious”</td>
<td style="text-align:left">右下角按键内容为’上一步’</td>
</tr>
<tr>
<td style="text-align:left">android:imeOptions=”actionNext”</td>
<td style="text-align:left">右下角按键内容为’下一步’</td>
</tr>
<tr>
<td style="text-align:left">android:imeOptions=”actionDone”</td>
<td style="text-align:left">右下角按键内容为’完成’</td>
</tr>
</tbody>
</table>
<p>For instance:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">etLayoutSearch.setOnEditorActionListener(<span class="keyword">new</span> TextView.OnEditorActionListener() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onEditorAction</span><span class="params">(TextView v, <span class="keyword">int</span> actionId, KeyEvent event)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (actionId == EditorInfo.IME_ACTION_SEARCH ) &#123;</span><br><span class="line">                   ...</span><br><span class="line">                &#125;</span><br><span class="line">				...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li><h3 id="Activity-onTrimMemory()"><a href="http://developer.android.com/intl/zh-cn/reference/android/content/ComponentCallbacks2.html" target="_blank" rel="external">Activity.onTrimMemory()</a></h3></li>
</ul>
<p><code>OnTrimMemory()</code>方法并不仅仅是Activity实现的方法，系统提供包括<code>Application</code>, <code>Fragement</code>, <code>Service</code>, <code>ContentProvider</code>  都可以实现这个回调。是的，回调。<br><code>OnTrimMemory</code>是Android在4.0之后加入的一个回调，任何实现了<code>ComponentCallbacks2</code>接口的类都可以重写实现这个回调方法．OnTrimMemory的主要作用就是指导应用程序在不同的情况下进行自身的内存释放，以避免被系统直接杀掉。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTrimMemory</span><span class="params">(<span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>.onTrimMemory(level);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<p>我们可以看到在实现回调的时候，传入了一个参数，这个参数是内存使用情况的等级。总共有七种情况，分别是<br><code>TRIM_MEMORY_UI_HIDDEN</code>、<br><code>TRIM_MEMORY_RUNNING_MODERATE</code>、<code>TRIM_MEMORY_RUNNING_LOW</code>、<code>TRIM_MEMORY_RUNNING_CRITICAL</code>、<br><code>TRIM_MEMORY_BACKGROUND</code>、<code>TRIM_MEMORY_MODERATE</code>、<code>TRIM_MEMORY_COMPLETE</code><br>从命名上大家应该能看出一些端倪，具体的在文档中有比较详细的说明和介绍。这里就不多说了，希望大家能够去看下。</p>
<p>那么我们需要在什么时候OnTrimMemory回调释放哪些资源呢？根据内存使用的等级情况，一般我们会在内存情况很糟糕<code>TRIM_MEMORY_COMPLETE</code>，或者应用所有UI界面被隐藏了<code>TRIM_MEMORY_UI_HIDDEN</code>、我们需要对应的来释放一些缓存资源，以及我们动态添加的使用较少的View，这样来保证应用不会被杀掉。<br>虽然，系统在内存不足的时候杀进程的顺序是按照LRU Cache中从低到高来的，但是它同时也会考虑杀掉那些占用内存较高的应用来让系统更快地获得更多的内存。如果我们应用占用内存较小，就可以增加不被杀掉的几率，从而快速地恢复。</p>
<p>另外，在api 14之前使用的 <code>OnLowMemory</code>，级别应该和<code>TRIM_MEMORY_COMPLETE</code>是差不多的。从这点也可以看出Google对Android应用内存使用情况越来越多的重视（虽然有些自家应用很Low……）。<br>所以，一个好的应用不仅仅是好看，流畅和快速的体验更加重要。</p>
<h2 id="Summary">Summary</h2><p>这样，这个系列基本算是结束了，后面如果自己工作中有发现更多好的API，我还是会不定时的过来更新。另外，如果大家在阅读过程中又发现问题或者有任何的意见或建议，可以在评论区留言。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Foreword">Foreword</h2><p>本文主要整理 <code>Cool Android Apis</code>。<br>这是这个系列的第三篇，第一篇 <a href="http://oakzmm.com/2015/08/04/cool-Android-api/">Cool Android Apis 整理（一）</a>，第二篇 <a href="http://oakzmm.com/2015/08/11/cool-Android-api-2/">Cool Android Apis 整理（二）</a> 。<br>非常抱歉，由于工作的原因，第三篇隔了很久才发 （写博客果然不是一件容易的事）。</p>
<blockquote>
<p>整理来源 </p>
<ul>
<li><p><code>Dan Lew</code> 的<a href="http://blog.danlew.net/2014/03/30/android-tips-round-up-part-1/">Android Tips Round-Up</a> 系列文章。<br>尤其感谢 <a href="http://www.jianshu.com/users/FK4sc4/latest_articles">Gracker</a> 对上面系列文章的 <a href="http://www.jianshu.com/notebooks/571559/latest">翻译和部分解释</a>。</p>
</li>
<li><p>知乎问题：<a href="http://www.zhihu.com/question/33636939">Android开发中，有哪些让你觉得相见恨晚的方法、类或接口？</a> </p>
</li>
</ul>
</blockquote>]]>
    
    </summary>
    
      <category term="Android" scheme="http://oakzmm.com/tags/Android/"/>
    
      <category term="android" scheme="http://oakzmm.com/categories/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Cool Android Apis 整理（二）]]></title>
    <link href="http://oakzmm.com/2015/08/11/cool-Android-api-2/"/>
    <id>http://oakzmm.com/2015/08/11/cool-Android-api-2/</id>
    <published>2015-08-11T04:27:45.000Z</published>
    <updated>2017-01-18T09:04:00.626Z</updated>
    <content type="html"><![CDATA[<h2 id="Foreword">Foreword</h2><p>本文主要整理 <code>Cool Android Apis</code>。<br>这是这个系列的第二篇，第一篇 <a href="http://oakzmm.com/2015/08/04/cool-Android-api/" target="_blank" rel="external">Cool Android Apis 整理（一）</a>。</p>
<p><strong>多说几句：<br>原本的想法是目前整理的知识点多分几篇来梳理，篇幅短些，这样大家看起来不累。但是也有弊端，就是不利于知识的整理。所以我对这些<code>TIPS</code>做了简单的筛选分类整理，在保证可读性的前提下，尽量的不割裂知识点间的联系。接下来会用两篇来总结完，请大家持续关注。如果有好的<code>tip</code>可以推荐给我。</strong></p>
<blockquote>
<p>整理来源 </p>
<ul>
<li><p><code>Dan Lew</code> 的<a href="http://blog.danlew.net/2014/03/30/android-tips-round-up-part-1/" target="_blank" rel="external">Android Tips Round-Up</a> 系列文章。<br>尤其感谢 <a href="http://www.jianshu.com/users/FK4sc4/latest_articles" target="_blank" rel="external">Gracker</a> 对上面系列文章的 <a href="http://www.jianshu.com/notebooks/571559/latest" target="_blank" rel="external">翻译和部分解释</a>。</p>
</li>
<li><p>知乎问题：<a href="http://www.zhihu.com/question/33636939" target="_blank" rel="external">Android开发中，有哪些让你觉得相见恨晚的方法、类或接口？</a> </p>
</li>
</ul>
</blockquote>
<p>所以说严格来讲这篇文章基本不是原创，但是我对每个Tip都加入或官方文档或使用方法或效果之类的补充。整个来说算是 <strong>“把书读厚”</strong> 的过程吧。<br><a id="more"></a>  </p>
<h2 id="Content">Content</h2><ul>
<li><h3 id="DateUtils-formatDateTime())"><del><a href="http://developer.android.com/intl/zh-cn/reference/android/text/format/DateUtils.html#formatDateTime(android.content.Context, long, int" target="_blank" rel="external">DateUtils.formatDateTime()</a>)</del></h3></li>
</ul>
<p>这个方法可以输出相应格式化的时间或者日期。这个方法提供足够多的格式化的形式，并且有一点:</p>
<blockquote>
<p>date formats in these examples are shown using the US date format convention but that may change depending on the local settings</p>
</blockquote>
<p>也就是这个输出的格式化的时间格式会根据本地语言设置来处理，但是中文的可能处理的并不能尽如人意，并不能像英文那样有很丰富的显示格式。 这里给大家看一些简单格式。</p>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:center"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">FORMAT_ABBREV_ALL</td>
<td style="text-align:center">8月10日</td>
</tr>
<tr>
<td style="text-align:left">FORMAT_SHOW_TIME:</td>
<td style="text-align:center">下午10:19</td>
</tr>
<tr>
<td style="text-align:left">FORMAT_SHOW_DATE:</td>
<td style="text-align:center">8月10日</td>
</tr>
<tr>
<td style="text-align:left">FORMAT_SHOW_YEAR:</td>
<td style="text-align:center">2015年8月10日</td>
</tr>
<tr>
<td style="text-align:left">FORMAT_SHOW_WEEKDAY:</td>
<td style="text-align:center">星期一</td>
</tr>
<tr>
<td style="text-align:left">FORMAT_NUMERIC_DATE:</td>
<td style="text-align:center">8/10</td>
</tr>
</tbody>
</table>
<p>但是我在看文档的过程中，很多格式在Google的文档中都提示过时了。并且推荐我们使用 <a href="http://developer.android.com/intl/zh-cn/reference/java/text/SimpleDateFormat.html" target="_blank" rel="external">SimpleDateFormat</a><br>这个类大家应该用的比较多，而且使用更方便。我个人也比较推荐大家使用这个。当然了，过时并不是不能使用。有些情况下还是可以用的。</p>
<p>Official Example：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> String[] formats = <span class="keyword">new</span> String[] &#123;</span><br><span class="line">   <span class="string">"yyyy-MM-dd"</span>,</span><br><span class="line">   <span class="string">"yyyy-MM-dd HH:mm"</span>,</span><br><span class="line">   <span class="string">"yyyy-MM-dd HH:mmZ"</span>,</span><br><span class="line">   <span class="string">"yyyy-MM-dd HH:mm:ss.SSSZ"</span>,</span><br><span class="line">   <span class="string">"yyyy-MM-dd'T'HH:mm:ss.SSSZ"</span>,</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="keyword">for</span> (String format : formats) &#123;</span><br><span class="line">   SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(format, Locale.US);</span><br><span class="line">   System.out.format(<span class="string">"%30s %s\n"</span>, format, sdf.format(<span class="keyword">new</span> Date(<span class="number">0</span>)));</span><br><span class="line">   sdf.setTimeZone(TimeZone.getTimeZone(<span class="string">"UTC"</span>));</span><br><span class="line">   System.out.format(<span class="string">"%30s %s\n"</span>, format, sdf.format(<span class="keyword">new</span> Date(<span class="number">0</span>)));</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//---------------result----------------------------------------//</span></span><br><span class="line"> 					yyyy-MM-dd <span class="number">1969</span>-<span class="number">12</span>-<span class="number">31</span></span><br><span class="line">                     yyyy-MM-dd <span class="number">1970</span>-<span class="number">01</span>-<span class="number">01</span></span><br><span class="line">               yyyy-MM-dd HH:mm <span class="number">1969</span>-<span class="number">12</span>-<span class="number">31</span> <span class="number">16</span>:<span class="number">00</span></span><br><span class="line">               yyyy-MM-dd HH:mm <span class="number">1970</span>-<span class="number">01</span>-<span class="number">01</span> <span class="number">00</span>:<span class="number">00</span></span><br><span class="line">              yyyy-MM-dd HH:mmZ <span class="number">1969</span>-<span class="number">12</span>-<span class="number">31</span> <span class="number">16</span>:<span class="number">00</span>-<span class="number">0800</span></span><br><span class="line">              yyyy-MM-dd HH:mmZ <span class="number">1970</span>-<span class="number">01</span>-<span class="number">01</span> <span class="number">00</span>:<span class="number">00</span>+<span class="number">0000</span></span><br><span class="line">       yyyy-MM-dd HH:mm:ss.SSSZ <span class="number">1969</span>-<span class="number">12</span>-<span class="number">31</span> <span class="number">16</span>:<span class="number">00</span>:<span class="number">00.000</span>-<span class="number">0800</span></span><br><span class="line">       yyyy-MM-dd HH:mm:ss.SSSZ <span class="number">1970</span>-<span class="number">01</span>-<span class="number">01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00.000</span>+<span class="number">0000</span></span><br><span class="line">     yyyy-MM-dd<span class="string">'T'</span>HH:mm:ss.SSSZ <span class="number">1969</span>-<span class="number">12</span>-<span class="number">31</span>T16:<span class="number">00</span>:<span class="number">00.000</span>-<span class="number">0800</span></span><br><span class="line">     yyyy-MM-dd<span class="string">'T'</span>HH:mm:ss.SSSZ <span class="number">1970</span>-<span class="number">01</span>-<span class="number">01</span>T00:<span class="number">00</span>:<span class="number">00.000</span>+<span class="number">0000</span></span><br></pre></td></tr></table></figure>
<p>部分语法对照,完整版可以参考<a href="http://developer.android.com/intl/zh-cn/reference/java/text/SimpleDateFormat.html" target="_blank" rel="external">Google文档</a> ，注意大小写。</p>
<table>
<thead>
<tr>
<th style="text-align:left">字母</th>
<th style="text-align:center">含义</th>
<th style="text-align:center">示例</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">y</td>
<td style="text-align:center">Year</td>
<td style="text-align:center">1996;96</td>
<td style="text-align:center">哪一年</td>
</tr>
<tr>
<td style="text-align:left">M</td>
<td style="text-align:center">Month in year</td>
<td style="text-align:center">July;Jul;07</td>
<td style="text-align:center">一年中的哪一月</td>
</tr>
<tr>
<td style="text-align:left">m</td>
<td style="text-align:center">Minute in hour</td>
<td style="text-align:center">30</td>
<td style="text-align:center">一个小时中的第几分钟  </td>
</tr>
<tr>
<td style="text-align:left">w</td>
<td style="text-align:center">Week in year</td>
<td style="text-align:center">27</td>
<td style="text-align:center">一年中的第几个星期  </td>
</tr>
<tr>
<td style="text-align:left">W</td>
<td style="text-align:center">Week in month</td>
<td style="text-align:center">2</td>
<td style="text-align:center">一个月中的第几个星期  </td>
</tr>
<tr>
<td style="text-align:left">D</td>
<td style="text-align:center">Day in year</td>
<td style="text-align:center">189</td>
<td style="text-align:center">一年中的第几天  </td>
</tr>
<tr>
<td style="text-align:left">d</td>
<td style="text-align:center">Day in month</td>
<td style="text-align:center">10</td>
<td style="text-align:center">一个月中的第几天  </td>
</tr>
<tr>
<td style="text-align:left">H</td>
<td style="text-align:center">Hour in day (0-23)</td>
<td style="text-align:center">0</td>
<td style="text-align:center">一天中的第几个小时（24小时制）  </td>
</tr>
<tr>
<td style="text-align:left">h</td>
<td style="text-align:center">Hour in am/pm (1-12）</td>
<td style="text-align:center">12</td>
<td style="text-align:center">一天中上午、下午的第几个小时（12小时制）  </td>
</tr>
<tr>
<td style="text-align:left">S</td>
<td style="text-align:center">Millisecond</td>
<td style="text-align:center">978</td>
<td style="text-align:center">毫秒数  </td>
</tr>
<tr>
<td style="text-align:left">s</td>
<td style="text-align:center">Second in minute</td>
<td style="text-align:center">55</td>
<td style="text-align:center">一分钟的第几秒  </td>
</tr>
</tbody>
</table>
<ul>
<li><h3 id="Formatter-formatFileSize()"><a href="http://developer.android.com/intl/zh-cn/reference/android/text/format/Formatter.html" target="_blank" rel="external">Formatter.formatFileSize()</a></h3></li>
</ul>
<blockquote>
<p>Formats a content size to be in the form of bytes, kilobytes, megabytes, etc</p>
</blockquote>
<p>这个方法会格式化数据的大小，根据输入的字节大小，返回 B KB MB GB 等等（最大支持到 PB）。当然要注意的是输入的最大值是 <code>Long.MAX_VALUE</code>.  以前不知道有这个方法 都是自己写的。。。摔！</p>
<p>注意： 这个类在 <code>android.text.format</code> 包下。</p>
<ul>
<li><h3 id="TypedValue-applyDimension()"><a href="http://developer.android.com/intl/zh-cn/reference/android/util/TypedValue.html" target="_blank" rel="external">TypedValue.applyDimension()</a></h3></li>
</ul>
<p>首先这个方法我们可以用来对sp dp 和 px 之间的单位转换。应该是有不少同学用过的。</p>
<p>我们来看下源码然后做下简单的分析：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line">    * Converts an unpacked complex data value holding a dimension to its final floating point value. The two parameters &lt;var&gt;unit&lt;/var&gt; and &lt;var&gt;value&lt;/var&gt;</span><br><span class="line">    * are as in &#123;@link #TYPE_DIMENSION&#125;.</span><br><span class="line">    *  </span><br><span class="line">    *<span class="javadoctag"> @param</span> unit The unit to convert from.</span><br><span class="line">    *<span class="javadoctag"> @param</span> value The value to apply the unit to.</span><br><span class="line">    *<span class="javadoctag"> @param</span> metrics Current display metrics to use in the conversion -- </span><br><span class="line">    *                supplies display density and scaling information.</span><br><span class="line">    * </span><br><span class="line">    *<span class="javadoctag"> @return</span> The complex floating point value multiplied by the appropriate </span><br><span class="line">    * metrics depending on its unit. </span><br><span class="line">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">applyDimension</span><span class="params">(<span class="keyword">int</span> unit, <span class="keyword">float</span> value,</span><br><span class="line">                                      DisplayMetrics metrics)</span></span><br><span class="line">   </span>&#123;</span><br><span class="line">       <span class="keyword">switch</span> (unit) &#123;</span><br><span class="line">       <span class="keyword">case</span> COMPLEX_UNIT_PX:</span><br><span class="line">           <span class="keyword">return</span> value;</span><br><span class="line">       <span class="keyword">case</span> COMPLEX_UNIT_DIP:</span><br><span class="line">           <span class="keyword">return</span> value * metrics.density;</span><br><span class="line">       <span class="keyword">case</span> COMPLEX_UNIT_SP:</span><br><span class="line">           <span class="keyword">return</span> value * metrics.scaledDensity;</span><br><span class="line">       <span class="keyword">case</span> COMPLEX_UNIT_PT:</span><br><span class="line">           <span class="keyword">return</span> value * metrics.xdpi * (<span class="number">1.0f</span>/<span class="number">72</span>);</span><br><span class="line">       <span class="keyword">case</span> COMPLEX_UNIT_IN:</span><br><span class="line">           <span class="keyword">return</span> value * metrics.xdpi;</span><br><span class="line">       <span class="keyword">case</span> COMPLEX_UNIT_MM:</span><br><span class="line">           <span class="keyword">return</span> value * metrics.xdpi * (<span class="number">1.0f</span>/<span class="number">25.4f</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Converts an unpacked complex data value holding a dimension to its final floating point value.</p>
</blockquote>
<p>先看下说明，这句话是说 将一个对应的数值转换为屏幕上实际的点的值，屏幕上实际的点的位置，就是像素值。</p>
<p>再来看 输入的参数：<br><code>Unit</code><br>The unit to convert from. 也就是要转换的数值的单位 （这个地方不要搞错了 ）<br><code>value</code><br>he value to apply the unit to. 也就是要转换的数值。<br><code>metrics</code>:<br>Current display metrics to use in the conversion — supplies display density and scaling information.</p>
<p><code>DisplayMetrics</code> 这个类提供一些和屏幕分辨率以及 显示的大小 或者字体大小之类的信息。这里不做深究（其实是因为看的并不很懂。。。捂脸）。<strong>但是还是推荐大家能去认真研究下这个类，因为这个类对于理解自定义View还是挺重要的。</strong></p>
<p>我们可以看到下面关于 转换的方法。可以得到的是：<br>Sp -&gt; px; dp -&gt; px ;以及 pt、in、mm、等转换为px。</p>
<blockquote>
<p>关于这些单位以及 density 和scaledDensity 详细的解析说明 可以参考这里 <a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2012/1129/647.html" target="_blank" rel="external">Android屏幕密度（Density）和分辨率概念详解</a> ;</p>
</blockquote>
<p><code>scaledDensity</code> 和 <code>density</code>:<br><strong> 根据DisplayMetrics源码的说明，<code>scaledDensity</code> 和 <code>density</code>, 一个是叫做显示密度,一个叫做缩放参数(和字体有关) 。而且对同一个设备来讲 density = scaledDensity = dpi/160f.</strong><br>对于不同dpi的设备来讲：</p>
<blockquote>
<p>0.75 on ldpi (120 dpi)<br>1.0 on mdpi (160 dpi; baseline)<br>1.5 on hdpi (240 dpi)<br>2.0 on xhdpi (320 dpi)<br>3.0 on xxhdpi (480 dpi)<br>4.0 on xxxhdpi (640 dpi)</p>
</blockquote>
<ul>
<li><h3 id="Pair-create()"><a href="http://developer.android.com/intl/zh-cn/reference/android/util/Pair.html" target="_blank" rel="external">Pair.create()</a></h3></li>
</ul>
<p>这个类 可以用来存储存储一”组”数据。但不是key和value的关系。</p>
<p>Example：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Pair&lt;String, String&gt; pair = Pair.create(<span class="string">"android开发"</span>, <span class="string">"自定view"</span>);</span><br><span class="line">Log.d(TAG, pair.first); <span class="comment">// android开发</span></span><br><span class="line">Log.d(TAG, pair.second); <span class="comment">// 自定view</span></span><br></pre></td></tr></table></figure></p>
<p>至于怎么使用，暂时，我没有想到什么合适场景使用，我个人并没有在项目使用过这个类。但是pair中数据的类型可以随便玩，可以是基本数据类型，可以是集合，可以是Bean，可以是Context等等。。。也就是说它可能合适在很多地方使用。而且在某些情况下会有很好的效果。如果有那位用过或者对这个类有更多的理解，可以留言告知。</p>
<ul>
<li><h3 id="SparseArray"><a href="http://developer.android.com/intl/zh-cn/reference/android/util/SparseArray.html" target="_blank" rel="external">SparseArray</a></h3></li>
</ul>
<p>目前有很多地方从性能优化方说使用SparseArray来替换hashMap，来节省内存，提高性能。<br>Google 文档中是这么说的。</p>
<blockquote>
<p>SparseArrays map integers to Objects. Unlike a normal array of Objects, there can be gaps in the indices. It is intended to be more memory efficient than using a HashMap to map Integers to Objects, both because it avoids auto-boxing keys and its data structure doesn’t rely on an extra entry object for each mapping.</p>
<p>Note that this container keeps its mappings in an array data structure, using a binary search to find keys. The implementation is not intended to be appropriate for data structures that may contain large numbers of items. It is generally slower than a traditional HashMap, since lookups require a binary search and adds and removes require inserting and deleting entries in the array. For containers holding up to hundreds of items, the performance difference is not significant, less than 50%.</p>
</blockquote>
<p>按照官方文档的解释，因为SparseArray不需要对key和value进行auto-boxing（将原始类型封装为对象类型，比如把int类型封装成Integer类型），结构比HashMap简单（SparseArray内部主要使用两个一维数组来保存数据，一个用来存key，一个用来存value）不需要额外的额外的数据结构（主要是针对HashMap中的HashMapEntry而言的）。</p>
<p>但是，在大量数据的情况下，<code>SparseArray</code> 的查询速度要慢很多。可能是 <code>SparseArray</code> 查询方法的问题。但是在数据量不特别的大的情况下还是推荐使用<code>SparseArray</code>。</p>
<ul>
<li><h3 id="Linkify-addLinks()"><a href="http://developer.android.com/intl/zh-cn/reference/android/text/util/Linkify.html" target="_blank" rel="external">Linkify.addLinks()</a></h3></li>
</ul>
<p>在整理（一）中我们提到可以使用Html的方式给文本添加超链接。而这个类可以更方便的为文本添加超链接。<br>Example: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">linkView0.setText(<span class="string">"http://oakzmm.com"</span>);</span><br><span class="line">Linkify.addLinks(linkView0, Linkify.WEB_URLS);</span><br><span class="line">linkView0.setMovementMethod(LinkMovementMethod.getInstance());</span><br></pre></td></tr></table></figure>
<p>超链接支持 <code>WEB</code>、<code>EMAIL</code>、<code>PHONE</code>、<code>MAP</code> 四种形式。</p>
<p>另外 <code>Linkify</code> 可以自定义约束和正则匹配 ,这是LInkify要比其他几种方式更加强大的地方。<br>详细可以参考这里：<a href="http://my.oschina.net/fengheju/blog/176105" target="_blank" rel="external">TextView 借助Linkify，使用自定义模式设置链接</a></p>
<p>说到这里就简单的说下实现超链接的几种方式 （可以匹配 <code>WEB</code>、<code>EMAIL</code>、<code>PHONE</code>、<code>MAP</code>）：</p>
<p>0.Linkify.addLinks()</p>
<p>1.直接在xml中TextView下直接设置:<br><figure class="highlight nimrod"><table><tr><td class="code"><pre><span class="line">android:text=<span class="string">"web:http://oakzmm.com \n tel:123457534 \n mail:macouen@gmail.com "</span></span><br></pre></td></tr></table></figure></p>
<p>2.Html方式：<br><figure class="highlight nimrod"><table><tr><td class="code"><pre><span class="line">//-----<span class="number">1</span>--<span class="type">Html</span></span><br><span class="line"></span><br><span class="line">linkView1.setText(</span><br><span class="line">        <span class="type">Html</span>.fromHtml(</span><br><span class="line">                <span class="string">"&lt;b&gt;fromHtml:&lt;/b&gt;  \t Click "</span> +</span><br><span class="line">                        <span class="string">"&lt;a href=\"http:/oakzmm.com\"&gt;here&lt;/a&gt; "</span> +</span><br><span class="line">                        <span class="string">"to visit my website "</span></span><br><span class="line">        )</span><br><span class="line">);</span><br><span class="line">linkView1.setMovementMethod(<span class="type">LinkMovementMethod</span>.getInstance());</span><br></pre></td></tr></table></figure></p>
<p>3.使用在TextView中使用&lt; a &gt; 标签，和上面的这种方式类似。</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="type">string</span> <span class="property">name</span>=<span class="string">"aText"</span>&gt;</span><br><span class="line">      String_a标签: Click &lt;a href=<span class="string">"http://oakzmm.com"</span>&gt;here&lt;/a&gt; <span class="keyword">to</span> visit <span class="keyword">my</span> website&lt;/<span class="type">string</span>&gt;</span><br></pre></td></tr></table></figure>
<p>4.使用强大的<code>Spans</code>来实现(下面会说到这个)。<br><figure class="highlight ocaml"><table><tr><td class="code"><pre><span class="line"><span class="type">SpannableString</span> ss = <span class="keyword">new</span> <span class="type">SpannableString</span>(<span class="string">"fromSpan:\t Click here to dial the phone."</span>);</span><br><span class="line">ss.setSpan(<span class="keyword">new</span> <span class="type">StyleSpan</span>(<span class="type">Typeface</span>.<span class="type">BOLD</span>), <span class="number">0</span>, <span class="number">9</span>,<span class="type">Spanned</span>.<span class="type">SPAN_EXCLUSIVE_EXCLUSIVE</span>);</span><br><span class="line">ss.setSpan(<span class="keyword">new</span> <span class="type">URLSpan</span>(<span class="string">"tel:4155551212"</span>), <span class="number">17</span>, <span class="number">21</span>,<span class="type">Spanned</span>.<span class="type">SPAN_EXCLUSIVE_EXCLUSIVE</span>);</span><br><span class="line">linkView2.setText(ss);</span><br><span class="line">linkView2.setMovementMethod(<span class="type">LinkMovementMethod</span>.getInstance<span class="literal">()</span>);</span><br></pre></td></tr></table></figure></p>
<ul>
<li><h3 id="android-text-Spanned"><a href="http://developer.android.com/intl/zh-cn/reference/android/text/style/package-summary.html" target="_blank" rel="external"> android.text.Spanned</a></h3></li>
</ul>
<p>Span非常之强大，但是并没有得到充分的使用。<br>这里，不再做详细的说明和介绍，因为有人全面的总结过，这里给大家贴出文章连接。</p>
<blockquote>
<ul>
<li><a href="http://blog.csdn.net/lixin84915/article/details/8110667" target="_blank" rel="external">Android文本样式——上</a></li>
<li><a href="http://blog.csdn.net/lixin84915/article/details/8111337" target="_blank" rel="external">Android文本样式——下</a></li>
<li><a href="http://zhengxiaopeng.com/2015/03/04/%E3%80%90%E8%AF%91%E3%80%91Spans%EF%BC%8C%E4%B8%80%E4%B8%AA%E5%BC%BA%E5%A4%A7%E7%9A%84%E6%A6%82%E5%BF%B5/" target="_blank" rel="external">Spans，一个强大的概念</a></li>
<li><a href="http://flavienlaurent.com/blog/2014/01/31/spans/" target="_blank" rel="external">Spans, a Powerful Concept.</a></li>
</ul>
</blockquote>
<p>我自己简单的写了部分效果的代码 , 包括上面的超链接的。</p>
<p>Example：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//-----0--autolink---</span></span><br><span class="line">       linkView0.setText(<span class="string">"http://oakzmm.com"</span>);</span><br><span class="line">       Linkify.addLinks(linkView0, Linkify.WEB_URLS);</span><br><span class="line">       linkView0.setMovementMethod(LinkMovementMethod.getInstance());</span><br><span class="line">       <span class="comment">//-----1--Html</span></span><br><span class="line"></span><br><span class="line">       linkView1.setText(</span><br><span class="line">               Html.fromHtml(</span><br><span class="line">                       <span class="string">"&lt;b&gt;fromHtml:&lt;/b&gt;  \t Click "</span> +</span><br><span class="line">                               <span class="string">"&lt;a href=\"http://macouen.github.io\"&gt;here&lt;/a&gt; "</span> +</span><br><span class="line">                               <span class="string">"to visit my website "</span></span><br><span class="line">               )</span><br><span class="line">       );</span><br><span class="line">       linkView1.setMovementMethod(LinkMovementMethod.getInstance());</span><br><span class="line">       <span class="comment">//-----2--span</span></span><br><span class="line">       <span class="javadoc">/**</span><br><span class="line">        * Spanned.SPAN_EXCLUSIVE_EXCLUSIVE(前后都不包括) (a,b);</span><br><span class="line">        * Spanned.SPAN_INCLUSIVE_EXCLUSIVE(前面包括，后面不包括) [a,b);</span><br><span class="line">        * Spanned.SPAN_EXCLUSIVE_INCLUSIVE(前面不包括，后面包括) (a,b];</span><br><span class="line">        * Spanned.SPAN_INCLUSIVE_INCLUSIVE(前后都包括) [a,b];</span><br><span class="line">        */</span></span><br><span class="line">       SpannableString ss = <span class="keyword">new</span> SpannableString(<span class="string">"fromSpan:\t Click here to dial the phone."</span>);</span><br><span class="line">       ss.setSpan(<span class="keyword">new</span> StyleSpan(Typeface.BOLD), <span class="number">0</span>, <span class="number">9</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">       ss.setSpan(<span class="keyword">new</span> URLSpan(<span class="string">"tel:4155551212"</span>), <span class="number">17</span>, <span class="number">21</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">       linkView2.setText(ss);</span><br><span class="line">       linkView2.setMovementMethod(LinkMovementMethod.getInstance());</span><br><span class="line">       <span class="comment">//----3---标签&lt;a&gt;</span></span><br><span class="line">       linkView3.setMovementMethod(LinkMovementMethod.getInstance());</span><br><span class="line">       <span class="javadoc">/**</span><br><span class="line">        * ------------------------------------------</span><br><span class="line">        * 1.字体样式（斜体，加粗）</span><br><span class="line">        * 2.字体大小（放大和拉伸），颜色（前景色和背景色）</span><br><span class="line">        * 3.下划线、删除线</span><br><span class="line">        * 4.上下标</span><br><span class="line">        * 5.超链接</span><br><span class="line">        * 6.TextView显示图片</span><br><span class="line">        * ------------------------------------------</span><br><span class="line">        */</span></span><br><span class="line">       spanView = (TextView) findViewById(R.id.spanText1);</span><br><span class="line">       span = <span class="keyword">new</span> SpannableString(</span><br><span class="line">               <span class="string">"字体:textVIEW\n"</span> +</span><br><span class="line">                       <span class="string">"样式:正常斜体加粗粗斜体\n"</span> +</span><br><span class="line">                       <span class="string">"大小:单位设置一半两倍横向拉伸\n"</span> +</span><br><span class="line">                       <span class="string">"颜色:前景色背景色\n"</span> +</span><br><span class="line">                       <span class="string">"下划线删除线\n"</span> +</span><br><span class="line">                       <span class="string">"上标x1下标x2\n"</span> +</span><br><span class="line">                       <span class="string">"超链接:电话 邮件 网站 短信 彩信 地图\n"</span> +</span><br><span class="line">                       <span class="string">"图片:abc"</span></span><br><span class="line">       );</span><br><span class="line">       <span class="comment">//字体 android默认有 monospace  normal sans serif</span></span><br><span class="line">       span.setSpan(<span class="keyword">new</span> TypefaceSpan(<span class="string">"monospace"</span>), <span class="number">3</span>, <span class="number">7</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">       span.setSpan(<span class="keyword">new</span> TypefaceSpan(<span class="string">"serif"</span>), <span class="number">7</span>, <span class="number">11</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">       <span class="comment">//样式</span></span><br><span class="line">       span.setSpan(<span class="keyword">new</span> StyleSpan(Typeface.NORMAL), <span class="number">15</span>, <span class="number">17</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);  <span class="comment">//正常</span></span><br><span class="line">       span.setSpan(<span class="keyword">new</span> StyleSpan(Typeface.ITALIC), <span class="number">17</span>, <span class="number">19</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);  <span class="comment">//斜体</span></span><br><span class="line">       span.setSpan(<span class="keyword">new</span> StyleSpan(Typeface.BOLD), <span class="number">19</span>, <span class="number">21</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);  <span class="comment">//加粗</span></span><br><span class="line">       span.setSpan(<span class="keyword">new</span> StyleSpan(Typeface.BOLD_ITALIC), <span class="number">21</span>, <span class="number">24</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);  <span class="comment">//粗斜体</span></span><br><span class="line">       <span class="comment">//大小</span></span><br><span class="line">       span.setSpan(<span class="keyword">new</span> AbsoluteSizeSpan(<span class="number">20</span>), <span class="number">28</span>, <span class="number">30</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">       span.setSpan(<span class="keyword">new</span> AbsoluteSizeSpan(<span class="number">20</span>, <span class="keyword">true</span>), <span class="number">30</span>, <span class="number">32</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">       span.setSpan(<span class="keyword">new</span> RelativeSizeSpan(<span class="number">0.5f</span>), <span class="number">32</span>, <span class="number">34</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">       span.setSpan(<span class="keyword">new</span> RelativeSizeSpan(<span class="number">2.0f</span>), <span class="number">34</span>, <span class="number">36</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">       span.setSpan(<span class="keyword">new</span> ScaleXSpan(<span class="number">1.5f</span>), <span class="number">36</span>, <span class="number">40</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">       <span class="comment">//颜色</span></span><br><span class="line">       span.setSpan(<span class="keyword">new</span> ForegroundColorSpan(Color.RED), <span class="number">44</span>, <span class="number">47</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">       span.setSpan(<span class="keyword">new</span> BackgroundColorSpan(Color.CYAN), <span class="number">47</span>, <span class="number">50</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">       <span class="comment">//线</span></span><br><span class="line">       span.setSpan(<span class="keyword">new</span> UnderlineSpan(), <span class="number">51</span>, <span class="number">54</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">       span.setSpan(<span class="keyword">new</span> StrikethroughSpan(), <span class="number">54</span>, <span class="number">57</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">       <span class="comment">//上下标</span></span><br><span class="line">       span.setSpan(<span class="keyword">new</span> SuperscriptSpan(), <span class="number">61</span>, <span class="number">62</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">       span.setSpan(<span class="keyword">new</span> SubscriptSpan(), <span class="number">65</span>, <span class="number">66</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">       <span class="comment">//连接</span></span><br><span class="line">       span.setSpan(<span class="keyword">new</span> URLSpan(<span class="string">"tel:4155551212"</span>), <span class="number">71</span>, <span class="number">73</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);     <span class="comment">//电话</span></span><br><span class="line">       span.setSpan(<span class="keyword">new</span> URLSpan(<span class="string">"mailto:macouen@gmail.com"</span>), <span class="number">74</span>, <span class="number">76</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);     <span class="comment">//邮件</span></span><br><span class="line">       span.setSpan(<span class="keyword">new</span> URLSpan(<span class="string">"http://macouen.github.io"</span>), <span class="number">77</span>, <span class="number">79</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);     <span class="comment">//网络</span></span><br><span class="line">       span.setSpan(<span class="keyword">new</span> URLSpan(<span class="string">"sms:4155551212"</span>), <span class="number">80</span>, <span class="number">82</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);     <span class="comment">//短信   使用sms:或者smsto:</span></span><br><span class="line">       span.setSpan(<span class="keyword">new</span> URLSpan(<span class="string">"mms:4155551212"</span>), <span class="number">83</span>, <span class="number">85</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);     <span class="comment">//彩信   使用mms:或者mmsto:</span></span><br><span class="line">       span.setSpan(<span class="keyword">new</span> URLSpan(<span class="string">"geo:38.899533,-77.036476"</span>), <span class="number">86</span>, <span class="number">88</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);     <span class="comment">//地图</span></span><br><span class="line">       <span class="comment">//图片</span></span><br><span class="line">       span.setSpan(<span class="keyword">new</span> ImageSpan(<span class="keyword">this</span>, R.mipmap.ic_launcher), <span class="number">92</span>, <span class="number">95</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">       spanView.setText(span);</span><br><span class="line">       spanView.setMovementMethod(LinkMovementMethod.getInstance());</span><br></pre></td></tr></table></figure>
<p>效果图：<img src="/image/api03.jpg" alt="Span"></p>
<ul>
<li><h3 id="ThumbnailUtils"><a href="http://developer.android.com/intl/zh-cn/reference/android/media/ThumbnailUtils.html" target="_blank" rel="external">ThumbnailUtils</a></h3></li>
</ul>
<p>这个类主要是用来处理缩略图相关的，有过这方面需求的，应该是用过这个类的。而且这个类只有3个静态方法，很简单。至于缩略图是怎么生成的 以及源码的实现，有兴趣的可以去看下。</p>
<ul>
<li><h4 id="extractThumbnail_(source,_width,_height)">extractThumbnail (source, width, height)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="javadoc">/** </span><br><span class="line"> *  </span><br><span class="line"> * 创建一个指定大小的缩略图 </span><br><span class="line"> *<span class="javadoctag"> @param</span> source 源文件(Bitmap类型) </span><br><span class="line"> *<span class="javadoctag"> @param</span> width  压缩成的宽度 </span><br><span class="line"> *<span class="javadoctag"> @param</span> height 压缩成的高度 </span><br><span class="line"> */</span>  </span><br><span class="line">ThumbnailUtils.extractThumbnail(source, width, height);</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="extractThumbnail(source,_width,_height,_options)">extractThumbnail(source, width, height, options)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="javadoc">/** </span><br><span class="line"> * 创建一个指定大小居中的缩略图 </span><br><span class="line"> *  </span><br><span class="line"> *<span class="javadoctag"> @param</span> source 源文件(Bitmap类型) </span><br><span class="line"> *<span class="javadoctag"> @param</span> width  输出缩略图的宽度 </span><br><span class="line"> *<span class="javadoctag"> @param</span> height 输出缩略图的高度 </span><br><span class="line"> *<span class="javadoctag"> @param</span> options 如果options定义为OPTIONS_RECYCLE_INPUT,则回收@param source这个资源文件 </span><br><span class="line"> * (除非缩略图等于@param source) </span><br><span class="line"> *  </span><br><span class="line"> */</span>  </span><br><span class="line">ThumbnailUtils.extractThumbnail(source, width, height, options);</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="createVideoThumbnail(filePath,_kind)">createVideoThumbnail(filePath, kind)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="javadoc">/** </span><br><span class="line"> * 创建一张视频的缩略图 </span><br><span class="line"> * 如果视频已损坏或者格式不支持可能返回null </span><br><span class="line"> *  </span><br><span class="line"> *<span class="javadoctag"> @param</span> filePath 视频文件路径  如：/sdcard/android.3gp </span><br><span class="line"> *<span class="javadoctag"> @param</span> kind kind可以为MINI_KIND或MICRO_KIND </span><br><span class="line"> *  </span><br><span class="line"> */</span>  </span><br><span class="line">ThumbnailUtils.createVideoThumbnail(filePath, kind);</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="Bitmap-extractAlpha())"><a href="http://developer.android.com/intl/zh-cn/reference/android/graphics/Bitmap.html#extractAlpha(" target="_blank" rel="external">Bitmap.extractAlpha()</a>)</h3></li>
</ul>
<blockquote>
<p>Returns a new bitmap that captures the alpha values of the original. This may be drawn with Canvas.drawBitmap(), where the color(s) will be taken from the paint that is passed to the draw call.</p>
</blockquote>
<p>这句话正面翻译过来：<br>返回一个新的位图，该位图从源图中捕获了alpha值。这个方法可能跟Canvas.drawBitmap()一起被画，颜色值从传递过来的画笔中获取。</p>
<p>有的时候我们需要动态的修改一个元素的背景图片又不希望使用多张图片的时候，通过这个方法，结合Canvas和Paint可以动态的修改一个纯色Bitmap的颜色。也可以在某些情况下对图片处理后给轮廓添加光圈效果等。</p>
<p>单独这么说，可能很抽象，上个简单Demo大家看下就应该明白了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.....</span><br><span class="line"><span class="comment">// 核心代码：</span></span><br><span class="line"></span><br><span class="line">Canvas mCanvas = <span class="keyword">new</span> Canvas(mAlphaBitmap);</span><br><span class="line">Paint mPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">mPaint.setColor(Color.RED);</span><br><span class="line"><span class="comment">// 从原位图中提取只包含alpha的位图</span></span><br><span class="line">Bitmap alphaBitmap = mBitmap.extractAlpha();</span><br><span class="line"><span class="comment">// 在画布上（mAlphaBitmap）绘制alpha位图</span></span><br><span class="line">mCanvas.drawBitmap(alphaBitmap, <span class="number">0</span>, <span class="number">0</span>, mPaint);</span><br><span class="line">.....</span><br></pre></td></tr></table></figure>
<p>效果图：<img src="/image/api04.gif" alt="Bitmap"></p>
<h2 id="Summary">Summary</h2><p>我们从第一篇开始大概是提到了这么几个类：</p>
<ul>
<li><strong>TextUtils</strong></li>
<li><strong>Html</strong></li>
<li><strong>PhoneNumberUtils</strong></li>
<li><strong>DateUtils</strong></li>
<li><strong>Formatter</strong></li>
<li><strong>Linkify</strong></li>
<li><strong>ThumbnailUtils</strong></li>
<li><strong>Bitmap</strong></li>
<li><strong>Spans</strong></li>
</ul>
<p>基本上这几个类都是提到了一个或者几个“比较巧妙”的方法。并不是说就那么几个方法是 VeryCool ，而其他的不是。在这些类中还是有好多方法需要花费更多的时间去了解和掌握。<br>尤其是像 Bitmap这样的，其中不乏我们经常使用而且很重要的方法，而且<code>Bitmap</code> 相关的，如，<code>Canvas</code> 、<code>Paint</code>、<code>GradientDrawable</code> 等。尤其是<code>Canvas</code>中 <code>clipRect</code>、<code>clipPath</code>和 <code>clipRegion</code> 这些十分重要的Api。</p>
<p>预告：第三篇，我准备整理一些很Cool的控件，以及控件的一些很棒的属性；Activity的方法。敬请期待。</p>
<hr>
<p>待续。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Foreword">Foreword</h2><p>本文主要整理 <code>Cool Android Apis</code>。<br>这是这个系列的第二篇，第一篇 <a href="http://oakzmm.com/2015/08/04/cool-Android-api/">Cool Android Apis 整理（一）</a>。</p>
<p><strong>多说几句：<br>原本的想法是目前整理的知识点多分几篇来梳理，篇幅短些，这样大家看起来不累。但是也有弊端，就是不利于知识的整理。所以我对这些<code>TIPS</code>做了简单的筛选分类整理，在保证可读性的前提下，尽量的不割裂知识点间的联系。接下来会用两篇来总结完，请大家持续关注。如果有好的<code>tip</code>可以推荐给我。</strong></p>
<blockquote>
<p>整理来源 </p>
<ul>
<li><p><code>Dan Lew</code> 的<a href="http://blog.danlew.net/2014/03/30/android-tips-round-up-part-1/">Android Tips Round-Up</a> 系列文章。<br>尤其感谢 <a href="http://www.jianshu.com/users/FK4sc4/latest_articles">Gracker</a> 对上面系列文章的 <a href="http://www.jianshu.com/notebooks/571559/latest">翻译和部分解释</a>。</p>
</li>
<li><p>知乎问题：<a href="http://www.zhihu.com/question/33636939">Android开发中，有哪些让你觉得相见恨晚的方法、类或接口？</a> </p>
</li>
</ul>
</blockquote>
<p>所以说严格来讲这篇文章基本不是原创，但是我对每个Tip都加入或官方文档或使用方法或效果之类的补充。整个来说算是 <strong>“把书读厚”</strong> 的过程吧。<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://oakzmm.com/tags/Android/"/>
    
      <category term="android" scheme="http://oakzmm.com/categories/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Cool Android Apis 整理（一）]]></title>
    <link href="http://oakzmm.com/2015/08/04/cool-Android-api/"/>
    <id>http://oakzmm.com/2015/08/04/cool-Android-api/</id>
    <published>2015-08-04T02:21:59.000Z</published>
    <updated>2017-01-18T09:03:43.422Z</updated>
    <content type="html"><![CDATA[<h2 id="Foreword">Foreword</h2><p>本文主要整理 <code>Cool Android Apis</code>。</p>
<blockquote>
<p>整理来源 </p>
<ul>
<li><p><code>Dan Lew</code> 的<a href="http://blog.danlew.net/2014/03/30/android-tips-round-up-part-1/" target="_blank" rel="external">Android Tips Round-Up</a> 系列文章。<br>尤其感谢 <a href="http://www.jianshu.com/users/FK4sc4/latest_articles" target="_blank" rel="external">Gracker</a> 对上面系列文章的 <a href="http://www.jianshu.com/notebooks/571559/latest" target="_blank" rel="external">翻译和部分解释</a>。</p>
</li>
<li><p>知乎问题：<a href="http://www.zhihu.com/question/33636939" target="_blank" rel="external">Android开发中，有哪些让你觉得相见恨晚的方法、类或接口？</a> </p>
</li>
</ul>
</blockquote>
<p>所以说严格来讲这篇文章基本不是原创，但是我对每个Tip都加入或官方文档或使用方法或效果之类的补充。整个来说算是 <strong>“把书读厚”</strong> 的过程吧。</p>
<h2 id="Content">Content</h2><ul>
<li><h3 id="Activity-startActivities()"><a href="http://developer.android.com/intl/zh-cn/reference/android/app/Activity.html#startActivities(android.content.Intent[]" target="_blank" rel="external">Activity.startActivities()</a></h3></li>
</ul>
<p>   其实我们绝大多数的开发者可能是没有用过这个方法的，根据我个人理解，用的到场景并不多。这个方法最直接的理解就是使用intent开启多个Activity，我在Google的关于<code>Activity.startActivities()</code>文档说明中，并没有获取到除了StartActivity之外更多的信息。于是我继续扒源码，果然在<code>Contex</code>t和<code>ContextCompat</code> 下找到了更加详细的说明和解释。<br><a id="more"></a><br>Context，以及 <a href="http://developer.android.com/intl/zh-cn/reference/android/support/v4/content/ContextCompat.html#startActivities%28android.content.Context,%20android.content.Intent%5B%5D%29" target="_blank" rel="external">documentation of ContextCompat </a></p>
<pre><code>* Launch multiple <span class="built_in">new</span> activities.  This is generally <span class="operator">the</span> same <span class="keyword">as</span> calling
* {@link <span class="comment">#startActivity(Intent)} for the first Intent in the array,</span>
* that activity during its creation calling {@link <span class="comment">#startActivity(Intent)}</span>
* <span class="keyword">for</span> <span class="operator">the</span> <span class="keyword">second</span> entry, etc.  Note that unlike that approach, generally
* <span class="constant">none</span> <span class="operator">of</span> <span class="operator">the</span> activities except <span class="operator">the</span> <span class="keyword">last</span> <span class="operator">in</span> <span class="operator">the</span> array will be created
* <span class="keyword">at</span> this point, but rather will be created when <span class="operator">the</span> user <span class="keyword">first</span> visits
* them (due <span class="built_in">to</span> pressing back <span class="built_in">from</span> <span class="operator">the</span> activity <span class="command"><span class="keyword">on</span> <span class="title">top</span>).</span>
</code></pre><p>从上面两处文档解释我们可以理解到的，<code>startActiviyies</code> 会创建一个新的Task Stack，任务栈里Activity的位置基于我们传入的Intent数组。当我们按返回键时，就会将栈顶的Activity移除。。其实这也是framework管理用户开启的activity的方式。这里结合<code>Activity</code>的启动模式来理解，就简单多了。</p>
<p>至于应用场景，我目前能想到的就是点击通知栏来开启应用的Activities，而开启哪些Activity以及相应顺序，我们就可以用到这个方法了。</p>
<ul>
<li><h3 id="TextUtils-isEmpty()"><a href="http://developer.android.com/intl/zh-cn/reference/android/text/TextUtils.html#isEmpty(java.lang.CharSequence" target="_blank" rel="external">TextUtils.isEmpty()</a></h3></li>
</ul>
<p>这个我想应该大部分同学都应该用过，具体些的说明： 如果传入的<code>String</code> 为NULL或者Length为0的话就返回 <strong><code>true</code></strong>。</p>
<ul>
<li><h3 id="Html-fromHtml()"><a href="http://developer.android.com/intl/zh-cn/reference/android/text/Html.html#fromHtml(java.lang.String" target="_blank" rel="external">Html.fromHtml()</a></h3></li>
</ul>
<p>如果你对<code>Html</code>熟悉的话，可以很迅速通过这个方法处理一些富文本操作。比如超链接和图文排版等处理。</p>
<p>Example:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">linkView.setText(</span><br><span class="line">              Html.fromHtml(</span><br><span class="line">                      <span class="string">"&lt;b&gt;fromHtml:&lt;/b&gt;  \t Click "</span> +</span><br><span class="line">                              <span class="string">"&lt;a href=\"http://oakzmm.com\"&gt;here&lt;/a&gt; "</span> +</span><br><span class="line">                              <span class="string">"to visit my website "</span></span><br><span class="line">              )</span><br><span class="line">      );</span><br></pre></td></tr></table></figure>
<ul>
<li><h3 id="TextView-setError()"><a href="http://developer.android.com/intl/zh-cn/reference/android/widget/TextView.html#setError%28java.lang.CharSequence%29" target="_blank" rel="external">TextView.setError()</a></h3></li>
</ul>
<p>这个还是直接上图吧 <img src="/image/api01.jpg" alt=""></p>
<ul>
<li><h3 id="View-isShown())"><a href="http://developer.android.com/intl/zh-cn/reference/android/view/View.html#isShown(" target="_blank" rel="external">View.isShown()</a>)</h3></li>
</ul>
<p>有不少人在知乎提到这个知识点，说是可以代替 <code>view.getVisibility() == View.VISIBLE</code> 这样的判断。<br>但是，但是，我做了下测试：</p>
<pre><code><span class="comment"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">editText = (EditText) findViewById(R.id.text);</span><br><span class="line">   System.out.println(<span class="string">"------------------"</span> + editText.isShown());</span><br><span class="line">   System.out.println(<span class="string">"------------------"</span> + (editText.getVisibility() == View.VISIBLE));</span><br></pre></td></tr></table></figure></span>
</code></pre><p>log：<br>    <figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="number">08</span>-<span class="number">05</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">29.822</span>  <span class="number">12720</span>-<span class="number">12720</span>/com<span class="class">.macouen</span><span class="class">.testdemo</span> I/System.out﹕ ------------------false</span><br><span class="line"><span class="number">08</span>-<span class="number">05</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">29.822</span>  <span class="number">12720</span>-<span class="number">12720</span>/com<span class="class">.macouen</span><span class="class">.testdemo</span> I/System.out﹕ ------------------true</span><br></pre></td></tr></table></figure></p>
<p>然而<a href="http://developer.android.com/intl/zh-cn/reference/android/view/View.html#isShown(" target="_blank" rel="external">Google文档</a>)：</p>
<pre><code><span class="comment"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isShown</span> <span class="params">()</span>                  Added in API level 1</span><br><span class="line">Returns the visibility of <span class="keyword">this</span> view and all of its ancestors</span><br><span class="line">Returns</span><br><span class="line">True <span class="keyword">if</span> <span class="keyword">this</span> view and all of its ancestors are VISIBLE</span></span><br></pre></td></tr></table></figure></span>
</code></pre><p>摔！老老实实用 <code>view.getVisibility() == View.VISIBLE</code> 吧。</p>
<ul>
<li><h3 id="Build-VERSION_CODES"><a href="http://blog.danlew.net/2014/03/30/android-tips-round-up-part-1/" target="_blank" rel="external">Build.VERSION_CODES</a></h3></li>
</ul>
<p>有些时候我们的app需要根据不同的SDK版本进行执行不同的操作</p>
<p>Example:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB) &#123;</span><br><span class="line">       ActionBar actionBar = getActionBar();</span><br><span class="line">       actionBar.setDisplayHomeAsUpEnabled(<span class="keyword">true</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><h3 id="PhoneNumberUtils-convertKeypadLettersToDigits"><a href="http://developer.android.com/intl/zh-cn/reference/android/telephony/PhoneNumberUtils.html#convertKeypadLettersToDigits%28java.lang.String%29" target="_blank" rel="external">PhoneNumberUtils.convertKeypadLettersToDigits</a></h3></li>
</ul>
<p>这个方法简单粗暴，但是我没用过。这个方法会将输入的字母根据键盘上的映射转换为数字。</p>
<blockquote>
<p>Translates any alphabetic letters (i.e. [A-Za-z]) in the specified phone number into the equivalent numeric digits, according to the phone keypad letter mapping described in ITU E.161 and ISO/IEC 9995-8.</p>
</blockquote>
<p>所谓的ITU E.161 标准的键盘就是我们常用的T9键盘。也就是这样<br><img src="/image/api02.jpg" alt=""></p>
<ul>
<li><h3 id="ArgbEvaluator"><a href="http://developer.android.com/intl/zh-cn/reference/android/animation/ArgbEvaluator.html" target="_blank" rel="external">ArgbEvaluator</a></h3></li>
</ul>
<p>!!重点这个方法简直不要太吊。。<br><code>ArgbEvaluator.evaluate(float fraction, Object startValue, Object endValue);</code>根据一个起始颜色值和一个结束颜色值以及一个偏移量生成一个新的颜色，分分钟实现类似于微信底部栏滑动颜色渐变。<br>这里提供另一个颜色渐变的版本 </p>
<blockquote>
<p>From Google Sample <a href="https://developer.android.com/intl/zh-cn/samples/SlidingTabsColors/src/com.example.android.common/view/SlidingTabStrip.html" target="_blank" rel="external">SlidingTabsColors</a>下的 <code>SlidingTabStrip.java</code></p>
</blockquote>
<pre><code><span class="comment"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line">    * Blend &#123;@code color1&#125; and &#123;@code color2&#125; using the given ratio.</span><br><span class="line">    *</span><br><span class="line">    *<span class="javadoctag"> @param</span> ratio of which to blend. 1.0 will return &#123;@code color1&#125;, 0.5 will give an even blend,</span><br><span class="line">    *              0.0 will return &#123;@code color2&#125;.</span><br><span class="line">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">blendColors</span><span class="params">(<span class="keyword">int</span> color1, <span class="keyword">int</span> color2, <span class="keyword">float</span> ratio)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">final</span> <span class="keyword">float</span> inverseRation = <span class="number">1f</span> - ratio;</span><br><span class="line">       <span class="keyword">float</span> r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRation);</span><br><span class="line">       <span class="keyword">float</span> g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRation);</span><br><span class="line">       <span class="keyword">float</span> b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRation);</span><br><span class="line">       <span class="keyword">return</span> Color.rgb((<span class="keyword">int</span>) r, (<span class="keyword">int</span>) g, (<span class="keyword">int</span>) b);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></span>
</code></pre><p>PS：这里说到ARGB，简单的提一下关于Alpha的问题 (和这个Tip并没有联系)。在Google I/O 2013大会上 <code>Romain Guy</code> 在<code>Android Graphics Performance</code> 这部分提到了 <code>use alpha with care</code> 。具体的可以参考：</p>
<blockquote>
<ul>
<li><a href="http://www.curious-creature.com/2015/03/25/android-performance-case-study-follow-up/?utm_source=Android+Weekly&amp;utm_campaign=0692ef161b-Android_Weekly_146&amp;utm_medium=email&amp;utm_term=0_4eb677ad19-0692ef161b-337850757" target="_blank" rel="external">Android Performance Case Study Follow-up</a></li>
<li><a href="http://www.stormzhang.com/android/2014/03/16/best-practices-for-using-alpha/" target="_blank" rel="external">Best Practices for Using Alpha</a></li>
</ul>
</blockquote>
<ul>
<li><h3 id="Space"><a href="http://developer.android.com/intl/zh-cn/reference/android/widget/Space.html" target="_blank" rel="external">Space</a></h3></li>
</ul>
<blockquote>
<p><strong>Added in API level 14</strong></p>
<p>Space is a lightweight View subclass that may be used to create gaps between components in general purpose layouts.</p>
</blockquote>
<p>最棒的一点是Space可以跳过 <code>Draw</code> 这个过程。</p>
<ul>
<li><h3 id="ValueAnimator-reverse()"><a href="http://developer.android.com/intl/zh-cn/reference/android/animation/ValueAnimator.html#reverse%28%29" target="_blank" rel="external">ValueAnimator.reverse()</a></h3></li>
</ul>
<p>之前见不少人提过这个方法，都是说可以顺畅的取消动画效果。文档中是这样说的。</p>
<blockquote>
<p>Plays the ValueAnimator in reverse. If the animation is already running, it will stop itself and play backwards from the point reached when reverse was called. If the animation is not currently running, then it will start from the end and play backwards. This behavior is only set for the current animation; future playing of the animation will use the default behavior of playing forward.</p>
</blockquote>
<p>也就是说这个方法其实是反转动画，如果动画正在播放，这个方法停止动画，并从当前点往回播。如果动画已经播放完毕那就反过来一遍。那么也就是说 “顺畅的取消动画效果” ，是动画还在播放的是时候来调用 <code>reverse</code> 这个方法。</p>
<hr>
<p>待续。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Foreword">Foreword</h2><p>本文主要整理 <code>Cool Android Apis</code>。</p>
<blockquote>
<p>整理来源 </p>
<ul>
<li><p><code>Dan Lew</code> 的<a href="http://blog.danlew.net/2014/03/30/android-tips-round-up-part-1/">Android Tips Round-Up</a> 系列文章。<br>尤其感谢 <a href="http://www.jianshu.com/users/FK4sc4/latest_articles">Gracker</a> 对上面系列文章的 <a href="http://www.jianshu.com/notebooks/571559/latest">翻译和部分解释</a>。</p>
</li>
<li><p>知乎问题：<a href="http://www.zhihu.com/question/33636939">Android开发中，有哪些让你觉得相见恨晚的方法、类或接口？</a> </p>
</li>
</ul>
</blockquote>
<p>所以说严格来讲这篇文章基本不是原创，但是我对每个Tip都加入或官方文档或使用方法或效果之类的补充。整个来说算是 <strong>“把书读厚”</strong> 的过程吧。</p>
<h2 id="Content">Content</h2><ul>
<li><h3 id="Activity-startActivities()"><a href="http://developer.android.com/intl/zh-cn/reference/android/app/Activity.html#startActivities(android.content.Intent[]">Activity.startActivities()</a></h3></li>
</ul>
<p>   其实我们绝大多数的开发者可能是没有用过这个方法的，根据我个人理解，用的到场景并不多。这个方法最直接的理解就是使用intent开启多个Activity，我在Google的关于<code>Activity.startActivities()</code>文档说明中，并没有获取到除了StartActivity之外更多的信息。于是我继续扒源码，果然在<code>Contex</code>t和<code>ContextCompat</code> 下找到了更加详细的说明和解释。<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://oakzmm.com/tags/Android/"/>
    
      <category term="android" scheme="http://oakzmm.com/categories/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用okHttp、Volley、Gson快速组装HttpClinet]]></title>
    <link href="http://oakzmm.com/2015/07/22/okHttp-Volley-Gson/"/>
    <id>http://oakzmm.com/2015/07/22/okHttp-Volley-Gson/</id>
    <published>2015-07-22T06:24:33.000Z</published>
    <updated>2017-01-18T09:03:03.650Z</updated>
    <content type="html"><![CDATA[<p>什么？你还不知道这3个货什么东西？<br>好吧，请移步这里 <a href="http://www.cnblogs.com/ct2011/p/4001708.html" target="_blank" rel="external">OkHttp使用介绍</a> 、<a href="https://bxbxbai.github.io/2014/09/14/android-working-with-volley/" target="_blank" rel="external">Android库Volley的使用介绍</a> 、 <a href="http://blog.csdn.net/jackie_xiaonan/article/details/14498187" target="_blank" rel="external">GSON使用的学习笔记，入门篇</a> 。 </p>
<h2 id="Foreword">Foreword</h2><ul>
<li><p>这并不是一篇特别有营养的技术博客，对于相关库的使用并没有做深入的解释，因为网上有很多翔实的解析和介绍，我会给出连接。 </p>
</li>
<li><p>服务端返回的是是json格式的数据。使用Android Studio 1.2.2 &amp; Gradle。</p>
</li>
</ul>
<a id="more"></a>
<h2 id="为什么是OKHttp，Volley，Gson_?">为什么是OKHttp，Volley，Gson ?</h2><p>原因有二：<br>一、水平不够，不能自己写出牛逼高效简单易用万人称赞而且代码好看的网络通信模块。<br>二、因为他们的优点。</p>
<p> <code>OKhttp</code>： 如果你看了上面第一篇的Blog，你就会发现OKHttp使用起来方便而且我们不用去考虑<code>HttpURLConnection</code>和<code>HttpClient</code>的那点破事。</p>
<p> <code>Volley</code>: 对于Volley深层次的解析和源码的讲解可以看这里 <a href="http://www.codekk.com/open-source-project-analysis/detail/Android/grumoon/Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90" target="_blank" rel="external">Volley 源码解析</a>（<strong>如果你对Volley了解不多，请务必看下这篇文章</strong>），Volley各种牛逼介绍我就不再重复。</p>
<p>我们看重的是他的优点：“<em>扩展性强，Volley 中大多是基于接口的设计，可配置性强。</em>”。<br> 作为一个强大的CV战士，既然是要动手组装，那么优秀的扩展性，就是必须的了。</p>
<p> <code>Gson</code>: 其实Gson并不是目前来说最好用的Json解析的工具，看图， Gson的解析能力并不是最优秀的，而且据说还有些小坑。但是你要知道Gson的lib只有几百k，另外Android Studio中竟然有GsonFormat的插件，分分中快速生成Model。就是要做快。枪。。手。。。</p>
<p> <img src="/image/okhttp01.jpg" alt=""></p>
<h2 id="怎么组装？">怎么组装？</h2><p>对于Volley，处理Http请求使用的是<code>HttpURLConnection</code>和<code>HttpClient</code> ：</p>
<blockquote>
<p>Android2.3 及以上基于 HttpURLConnection，2.3 以下基于 HttpClient 实现 。</p>
</blockquote>
<p><strong> 显而易见，我们要用OKHttp的底层通信处理来代替Volley的方案。</strong></p>
<p>Volley提供<code>StringRequest</code>和<code>JsonRequest</code>，以及<code>ImageRequest</code>（这里关于Volley Image相关的不作涉及，有需求的请自行改造）。并不能完全满足我们的需求。</p>
<p><strong> 所以我们使用Gson来自定义自己的<code>CustomRequest</code> 。</strong> </p>
<h3 id="1-_添加相关的支持库">1. 添加相关的支持库</h3><pre><code><span class="keyword">compile</span> files(<span class="string">'libs/gson-2.3.1.jar'</span>)
<span class="keyword">compile</span> <span class="string">'com.mcxiaoke.volley:library:1.0.17'</span>
<span class="keyword">compile</span> <span class="string">'com.squareup.okhttp:okhttp:2.4.0'</span>
<span class="keyword">compile</span> <span class="string">'com.squareup.okhttp:okhttp-urlconnection:2.4.0'</span>
<span class="keyword">compile</span> <span class="string">'com.squareup.okio:okio:1.5.0'</span>
</code></pre><h3 id="2-_配置Volley">2. 配置Volley</h3><p>根据官方的<a href="http://developer.android.com/intl/zh-cn/training/volley/requestqueue.html#network" target="_blank" rel="external">Training教程</a> 最基本的我们需要这么写 (很多教程都推荐写到Application中，也是ok的)：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpClientRequest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HttpClientRequest mInstance;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Context mCtx;</span><br><span class="line">    <span class="keyword">public</span> RequestQueue mRequestQueue;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HttpClientRequest</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        mCtx = context;</span><br><span class="line">        mRequestQueue = getRequestQueue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> HttpClientRequest <span class="title">getInstance</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mInstance = <span class="keyword">new</span> HttpClientRequest(context);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="javadoc">/**</span><br><span class="line">     * Returns a Volley request queue for creating network requests</span><br><span class="line">     *</span><br><span class="line">     *<span class="javadoctag"> @return</span> &#123;@link com.android.volley.RequestQueue&#125;</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RequestQueue <span class="title">getRequestQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mRequestQueue == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// getApplicationContext() is key, it keeps you from leaking the</span></span><br><span class="line">            <span class="comment">// Activity or BroadcastReceiver if someone passes one in.</span></span><br><span class="line">            mRequestQueue = Volley.newRequestQueue(mCtx.getApplicationContext());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mRequestQueue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="javadoc">/**</span><br><span class="line">     * Adds a request to the Volley request queue</span><br><span class="line">     *</span><br><span class="line">     *<span class="javadoctag"> @param</span> request is the request to add to the Volley queue</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">addRequest</span><span class="params">(Request&lt;T&gt; request)</span> </span>&#123;</span><br><span class="line">        getRequestQueue().add(request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-_使用OKHttp的底层通信处理来代替Volley的方案">3. 使用OKHttp的底层通信处理来代替Volley的方案</h3><p>这个方案的基础是 <a href="https://android-review.googlesource.com/#/c/59170/" target="_blank" rel="external">Volley支持自定义HttpStack</a> </p>
<blockquote>
<p>Allow custom HttpStack in Volley.newRequestQueue.</p>
<p>Add a variant method that allows the user to pass in<br>an HttpStack to be passed to BasicNetwork. Makes using<br>alternative stacks like OkHttp easier.</p>
</blockquote>
<p>首先这个问题一点都不新鲜，因为很早就有人想这么干了，有人在Stack Overflow提问了这个问题<a href="http://stackoverflow.com/questions/24375043/how-to-implement-android-volley-with-okhttp-2-0/24951835#24951835" target="_blank" rel="external">How to implement Android Volley with OkHttp 2.0?</a>，包括  <a href="https://plus.google.com/+JakeWharton/posts/eJJxhkTQ4yU" target="_blank" rel="external">Jake Wharton 说过可以这么搞 </a> 。</p>
<p>那么现在问题的关键就是怎么搞的问题， 很早 jake大神提出一个方案 <a href="https://gist.github.com/JakeWharton/5616899" target="_blank" rel="external">OkHttpStack.java</a> ，但是随着OKhttp的更新，最初的方法已经不能使用了，逐渐的就有人在使用过程中又了更完善的方案：<br><a href="https://gist.github.com/bryanstern/4e8f1cb5a8e14c202750" target="_blank" rel="external">OkHttpStack.java</a>。看起来不很不错的样子，好就用这个了。</p>
<p><strong> ok，现在把我们的HttpClientRequest中getRequestQueue()方法修改下。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">....</span><br><span class="line"> <span class="javadoc">/**</span><br><span class="line">     * Returns a Volley request queue for creating network requests</span><br><span class="line">     *</span><br><span class="line">     *<span class="javadoctag"> @return</span> &#123;@link com.android.volley.RequestQueue&#125;</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RequestQueue <span class="title">getRequestQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mRequestQueue == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// getApplicationContext() is key, it keeps you from leaking the</span></span><br><span class="line">            <span class="comment">// Activity or BroadcastReceiver if someone passes one in.</span></span><br><span class="line">            <span class="comment">// use  custom okhttpStack, make better work .</span></span><br><span class="line">            mRequestQueue = Volley.newRequestQueue(mCtx.getApplicationContext(),</span><br><span class="line">                    <span class="keyword">new</span> OkHttpStack(<span class="keyword">new</span> OkHttpClient()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mRequestQueue;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h3 id="4-_自定义Request">4. 自定义Request</h3><p>对于这个，官方的 <a href="http://developer.android.com/intl/zh-cn/training/volley/request-custom.html" target="_blank" rel="external">Training教程</a> 是这样的写的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GsonRequest</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Request</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;T&gt; clazz;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, String&gt; headers;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Listener&lt;T&gt; listener;</span><br><span class="line"></span><br><span class="line">    <span class="javadoc">/**</span><br><span class="line">     * Make a GET request and return a parsed object from JSON.</span><br><span class="line">     *</span><br><span class="line">     *<span class="javadoctag"> @param</span> url URL of the request to make</span><br><span class="line">     *<span class="javadoctag"> @param</span> clazz Relevant class object, for Gson's reflection</span><br><span class="line">     *<span class="javadoctag"> @param</span> headers Map of request headers</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GsonRequest</span><span class="params">(String url, Class&lt;T&gt; clazz, Map&lt;String, String&gt; headers,</span><br><span class="line">            Listener&lt;T&gt; listener, ErrorListener errorListener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Method.GET, url, errorListener);</span><br><span class="line">        <span class="keyword">this</span>.clazz = clazz;</span><br><span class="line">        <span class="keyword">this</span>.headers = headers;</span><br><span class="line">        <span class="keyword">this</span>.listener = listener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; getHeaders() <span class="keyword">throws</span> AuthFailureError &#123;</span><br><span class="line">        <span class="keyword">return</span> headers != <span class="keyword">null</span> ? headers : <span class="keyword">super</span>.getHeaders();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">deliverResponse</span><span class="params">(T response)</span> </span>&#123;</span><br><span class="line">        listener.onResponse(response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Response&lt;T&gt; <span class="title">parseNetworkResponse</span><span class="params">(NetworkResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String json = <span class="keyword">new</span> String(</span><br><span class="line">                    response.data,</span><br><span class="line">                    HttpHeaderParser.parseCharset(response.headers));</span><br><span class="line">            <span class="keyword">return</span> Response.success(</span><br><span class="line">                    gson.fromJson(json, clazz),</span><br><span class="line">                    HttpHeaderParser.parseCacheHeaders(response));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> Response.error(<span class="keyword">new</span> ParseError(e));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonSyntaxException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> Response.error(<span class="keyword">new</span> ParseError(e));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个Request对付基本的也就够用了，但是在使用过程中，发现一些问题，Volley竟然没有提供设置POST参数的方法，但是当发出POST请求的时候，Volley会尝试调用Request中的getParams()方法来获取POST参数。ok，改一下，添加下getParams()方法，再来个构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line">   <span class="javadoc">/**</span><br><span class="line">   * Make a request and return a parsed object from JSON.</span><br><span class="line">   *</span><br><span class="line">   *<span class="javadoctag"> @param</span> url     URL of the request to make</span><br><span class="line">   *<span class="javadoctag"> @param</span> clazz   Relevant class object, for Gson's reflection</span><br><span class="line">   *<span class="javadoctag"> @param</span> headers Map of request headers</span><br><span class="line">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">CustomRequest</span><span class="params">(<span class="keyword">int</span> method, String url, Class&lt;T&gt; clazz, Map&lt;String, String&gt; headers,</span><br><span class="line">                       Map&lt;String, String&gt; params,</span><br><span class="line">                       Response.Listener&lt;T&gt; listener, Response.ErrorListener errorListener)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>(method, url, errorListener);</span><br><span class="line">      <span class="keyword">this</span>.clazz = clazz;</span><br><span class="line">      <span class="keyword">this</span>.headers = headers;</span><br><span class="line">      <span class="keyword">this</span>.params = params;</span><br><span class="line">      <span class="keyword">this</span>.listener = listener;</span><br><span class="line">  &#125;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> Map&lt;String, String&gt; getParams() <span class="keyword">throws</span> AuthFailureError &#123;</span><br><span class="line">      <span class="keyword">return</span> params != <span class="keyword">null</span> ? params : <span class="keyword">super</span>.getParams();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>但是这样用起来还是不太爽，因为我要用时候需要在activity里new这个Request，这样看起来代码并不好看。我想放到HttpClientRequest中，封装起来。但是如果我想同时设置 <code>method</code> 、<code>url</code> 、<code>class</code>、 <code>headers</code>、 <code>params</code> 还有<code>listner</code>等等。代码还是不怎么不好看不说，好像用起来也不太方便，扩展也不太好。我参考了下okhttp是这样写的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">      .url(url)</span><br><span class="line">      .post(body)</span><br><span class="line">      .build();</span><br></pre></td></tr></table></figure>
<p>好像很不错的样子，我们也根据自己的需求这样搞一下,</p>
<p>最后我们成形的CustomRequest就是这样了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">**</span><br><span class="line"> * MyApplication</span><br><span class="line"> * Created by acer_april</span><br><span class="line"> * on <span class="number">2015</span>/<span class="number">7</span>/<span class="number">20</span></span><br><span class="line"> * Description: customVolleyRequest</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomRequest</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Request</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;T&gt; clazz;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, String&gt; headers;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Response.Listener&lt;T&gt; listener;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; params;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="javadoc">/**</span><br><span class="line">     * Make a GET request and return a parsed object from JSON.</span><br><span class="line">     *</span><br><span class="line">     *<span class="javadoctag"> @param</span> url    URL of the request to make</span><br><span class="line">     *<span class="javadoctag"> @param</span> clazz  Relevant class object, for Gson's reflection</span><br><span class="line">     *<span class="javadoctag"> @param</span> params Map of request params</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomRequest</span><span class="params">(String url, Class&lt;T&gt; clazz, Map&lt;String, String&gt; params,</span><br><span class="line">                         Response.Listener&lt;T&gt; listener, Response.ErrorListener errorListener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Method.GET, url, errorListener);</span><br><span class="line">        <span class="keyword">this</span>.clazz = clazz;</span><br><span class="line">        <span class="keyword">this</span>.headers = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.params = params;</span><br><span class="line">        <span class="keyword">this</span>.listener = listener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="javadoc">/**</span><br><span class="line">     * Make a request and return a parsed object from JSON.</span><br><span class="line">     *</span><br><span class="line">     *<span class="javadoctag"> @param</span> url     URL of the request to make</span><br><span class="line">     *<span class="javadoctag"> @param</span> clazz   Relevant class object, for Gson's reflection</span><br><span class="line">     *<span class="javadoctag"> @param</span> headers Map of request headers</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomRequest</span><span class="params">(<span class="keyword">int</span> method, String url, Class&lt;T&gt; clazz, Map&lt;String, String&gt; headers,</span><br><span class="line">                         Map&lt;String, String&gt; params,</span><br><span class="line">                         Response.Listener&lt;T&gt; listener, Response.ErrorListener errorListener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(method, url, errorListener);</span><br><span class="line">        <span class="keyword">this</span>.clazz = clazz;</span><br><span class="line">        <span class="keyword">this</span>.headers = headers;</span><br><span class="line">        <span class="keyword">this</span>.params = params;</span><br><span class="line">        <span class="keyword">this</span>.listener = listener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="javadoc">/**</span><br><span class="line">     *<span class="javadoctag"> @param</span> builder requestBuilder</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomRequest</span><span class="params">(RequestBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(builder.method, builder.url, builder.errorListener);</span><br><span class="line">        clazz = builder.clazz;</span><br><span class="line">        headers = builder.headers;</span><br><span class="line">        listener = builder.successListener;</span><br><span class="line">        params = builder.params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; getHeaders() <span class="keyword">throws</span> AuthFailureError &#123;</span><br><span class="line">        <span class="keyword">return</span> headers != <span class="keyword">null</span> ? headers : <span class="keyword">super</span>.getHeaders();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Map&lt;String, String&gt; getParams() <span class="keyword">throws</span> AuthFailureError &#123;</span><br><span class="line">        <span class="keyword">return</span> params != <span class="keyword">null</span> ? params : <span class="keyword">super</span>.getParams();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">deliverResponse</span><span class="params">(T response)</span> </span>&#123;</span><br><span class="line">        listener.onResponse(response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Response&lt;T&gt; <span class="title">parseNetworkResponse</span><span class="params">(NetworkResponse response)</span> </span>&#123;</span><br><span class="line">        String parsed;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            parsed = <span class="keyword">new</span> String(response.data, HttpHeaderParser.parseCharset(response.headers));</span><br><span class="line">            <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> (Response&lt;T&gt;) Response.success(parsed,</span><br><span class="line">                        HttpHeaderParser.parseCacheHeaders(response));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Response.success(gson.fromJson(parsed, clazz),</span><br><span class="line">                        HttpHeaderParser.parseCacheHeaders(response));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> Response.error(<span class="keyword">new</span> ParseError(e));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonSyntaxException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> Response.error(<span class="keyword">new</span> ParseError(e));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> Response.error(<span class="keyword">new</span> ParseError(e));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="javadoc">/**</span><br><span class="line">     * requestBiulder  使用方法参见httpClientRequest</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestBuilder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> method = Method.GET;</span><br><span class="line">        <span class="keyword">private</span> String url;</span><br><span class="line">        <span class="keyword">private</span> Class clazz;</span><br><span class="line">        <span class="keyword">private</span> Response.Listener successListener;</span><br><span class="line">        <span class="keyword">private</span> Response.ErrorListener errorListener;</span><br><span class="line">        <span class="keyword">private</span> Map&lt;String, String&gt; headers;</span><br><span class="line">        <span class="keyword">private</span> Map&lt;String, String&gt; params;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RequestBuilder <span class="title">url</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.url = url;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RequestBuilder <span class="title">clazz</span><span class="params">(Class clazz)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.clazz = clazz;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RequestBuilder <span class="title">successListener</span><span class="params">(Response.Listener successListener)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.successListener = successListener;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RequestBuilder <span class="title">errorListener</span><span class="params">(Response.ErrorListener errorListener)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.errorListener = errorListener;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RequestBuilder <span class="title">post</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.method = Method.POST;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RequestBuilder <span class="title">method</span><span class="params">(<span class="keyword">int</span> method)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.method = method;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RequestBuilder <span class="title">addHeader</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (headers == <span class="keyword">null</span>)</span><br><span class="line">                headers = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            headers.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RequestBuilder <span class="title">headers</span><span class="params">(Map&lt;String, String&gt; headers)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.headers = headers;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RequestBuilder <span class="title">params</span><span class="params">(Map&lt;String, String&gt; params)</span> </span>&#123;</span><br><span class="line">            post();</span><br><span class="line">            <span class="keyword">this</span>.params = params;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RequestBuilder <span class="title">addParams</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (params == <span class="keyword">null</span>) &#123;</span><br><span class="line">                params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                post();</span><br><span class="line">            &#125;</span><br><span class="line">            params.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RequestBuilder <span class="title">addMethodParams</span><span class="params">(String method)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (params == <span class="keyword">null</span>) &#123;</span><br><span class="line">                params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                post();</span><br><span class="line">            &#125;</span><br><span class="line">            params.put(<span class="string">"method"</span>, method);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> CustomRequest <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CustomRequest(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>封装方法的时候这样写，另外加上取消请求的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">	 <span class="javadoc">/**</span><br><span class="line">     * Returns a Volley request queue for creating network requests</span><br><span class="line">     *</span><br><span class="line">     *<span class="javadoctag"> @return</span> &#123;@link com.android.volley.RequestQueue&#125;</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RequestQueue <span class="title">getRequestQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mRequestQueue == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// getApplicationContext() is key, it keeps you from leaking the</span></span><br><span class="line">            <span class="comment">// Activity or BroadcastReceiver if someone passes one in.</span></span><br><span class="line">            <span class="comment">// use  custom okhttpStack, make better work .</span></span><br><span class="line">            mRequestQueue = Volley.newRequestQueue(mCtx.getApplicationContext(),</span><br><span class="line">                    <span class="keyword">new</span> OkHttpStack(<span class="keyword">new</span> OkHttpClient()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mRequestQueue;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="javadoc">/**</span><br><span class="line">     * Cancels all the request in the Volley queue for a given tag</span><br><span class="line">     *</span><br><span class="line">     *<span class="javadoctag"> @param</span> tag associated with the Volley requests to be cancelled</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancelAllRequests</span><span class="params">(String tag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (getRequestQueue() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            getRequestQueue().cancelAll(tag);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="javadoc">/**</span><br><span class="line">     * Adds a request to the Volley request queue</span><br><span class="line">     *</span><br><span class="line">     *<span class="javadoctag"> @param</span> request is the request to add to the Volley queuest</span><br><span class="line">     *<span class="javadoctag"> @param</span> tag is the tag identifying the request</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">addRequest</span><span class="params">(Request&lt;T&gt; request, String tag)</span> </span>&#123;</span><br><span class="line">        request.setTag(tag);</span><br><span class="line">        getRequestQueue().add(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="javadoc">/**</span><br><span class="line">     * 使用和参数配置范例</span><br><span class="line">     *</span><br><span class="line">     *<span class="javadoctag"> @param</span> param1</span><br><span class="line">     *<span class="javadoctag"> @param</span> param2</span><br><span class="line">     *<span class="javadoctag"> @param</span> listener</span><br><span class="line">     *<span class="javadoctag"> @param</span> errorListener</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getDemoData</span><span class="params">(String param1,</span><br><span class="line">                            String param2,</span><br><span class="line">                            Response.Listener listener,</span><br><span class="line">                            Response.ErrorListener errorListener,String tag)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        params.put(<span class="string">"param1"</span>, param1);</span><br><span class="line">        params.put(<span class="string">"param2"</span>, param2);</span><br><span class="line"></span><br><span class="line">        CustomRequest request = <span class="keyword">new</span> CustomRequest.RequestBuilder()</span><br><span class="line"><span class="comment">//                .post()//不设置的话默认GET 但是设置了参数就不需要了。。。</span></span><br><span class="line">                .url(<span class="string">""</span>)<span class="comment">//url会统一配置到requestUrl类中 </span></span><br><span class="line">                .addMethodParams(<span class="string">""</span>) <span class="comment">//请求的方法名</span></span><br><span class="line">                        <span class="comment">// 添加参数方法1 适用参数比较多的情况下</span></span><br><span class="line"><span class="comment">//                .params(params)</span></span><br><span class="line">                        <span class="comment">// 添加参数方法2</span></span><br><span class="line">                .addParams(<span class="string">"param1"</span>, param1)<span class="comment">//添加参数1</span></span><br><span class="line">                .addParams(<span class="string">"param2"</span>, param2)<span class="comment">//添加参数2</span></span><br><span class="line"><span class="comment">//                .clazz(Test.calss) //如果设置了返回类型，会自动解析返回model 如果不设置会直接返回json数据;</span></span><br><span class="line">                .successListener(listener)<span class="comment">//获取数据成功的listener</span></span><br><span class="line">                .errorListener(errorListener)<span class="comment">//获取数据异常的listener</span></span><br><span class="line">                .build();</span><br><span class="line">        addRequest(request,tag);</span><br><span class="line">        <span class="comment">//将请求add到队列中。并设置tag  并需要相应activity onStop方法中调用cancel方法</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>ok，大功告成，组装完毕。</p>
<hr>
<p>最后，<strong><a href="https://github.com/macouen/lunzi" target="_blank" rel="external">源码下载</a> </strong></p>
<h2 id="参考资料">参考资料</h2><ul>
<li><a href="http://www.cnblogs.com/ct2011/p/4001708.html" target="_blank" rel="external">OkHttp使用介绍</a> </li>
<li><a href="https://bxbxbai.github.io/2014/09/14/android-working-with-volley/" target="_blank" rel="external">Android库Volley的使用介绍</a> </li>
<li><a href="http://blog.csdn.net/guolin_blog/article/details/17482095" target="_blank" rel="external">Android Volley完全解析</a></li>
<li><a href="http://www.codekk.com/open-source-project-analysis/detail/Android/grumoon/Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90" target="_blank" rel="external">Volley 源码解析</a></li>
<li><a href="http://blog.csdn.net/jackie_xiaonan/article/details/14498187" target="_blank" rel="external">GSON使用的学习笔记，入门篇</a> </li>
<li><a href="https://medium.com/@sotti/android-networking-i-okhttp-volley-and-gson-72004efff196" target="_blank" rel="external">Android Networking I: OkHttp, Volley and Gson</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>什么？你还不知道这3个货什么东西？<br>好吧，请移步这里 <a href="http://www.cnblogs.com/ct2011/p/4001708.html">OkHttp使用介绍</a> 、<a href="https://bxbxbai.github.io/2014/09/14/android-working-with-volley/">Android库Volley的使用介绍</a> 、 <a href="http://blog.csdn.net/jackie_xiaonan/article/details/14498187">GSON使用的学习笔记，入门篇</a> 。 </p>
<h2 id="Foreword">Foreword</h2><ul>
<li><p>这并不是一篇特别有营养的技术博客，对于相关库的使用并没有做深入的解释，因为网上有很多翔实的解析和介绍，我会给出连接。 </p>
</li>
<li><p>服务端返回的是是json格式的数据。使用Android Studio 1.2.2 &amp; Gradle。</p>
</li>
</ul>]]>
    
    </summary>
    
      <category term="http" scheme="http://oakzmm.com/tags/http/"/>
    
      <category term="android" scheme="http://oakzmm.com/categories/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[常用的Android studio的live templates汇总]]></title>
    <link href="http://oakzmm.com/2015/07/16/live-templates/"/>
    <id>http://oakzmm.com/2015/07/16/live-templates/</id>
    <published>2015-07-16T08:47:27.000Z</published>
    <updated>2015-08-11T10:42:53.440Z</updated>
    <content type="html"><![CDATA[<p><em>Android studio 默认的是按Tab 自动生成代码块的，用户可以自己在setting—&gt;Live Templates里面进行设置expand style</em></p>
<h2 id="下面是一常用的Live_Templates的汇总说明">下面是一常用的Live Templates的汇总说明</h2><a id="more"></a>
<ul>
<li><h3 id="输出打印_Groovy(常规部分)">输出打印  Groovy(常规部分)</h3></li>
</ul>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">serr ---&gt;<span class="constant">System.</span>err.println(<span class="string">"example"</span>)</span><br><span class="line">souf ---&gt;printf <span class="string">"example"</span></span><br><span class="line">sout ---&gt;println <span class="string">"example"</span></span><br><span class="line">soutm ---&gt;<span class="constant">System.</span>out.println(<span class="string">"MainActivity.onCreate"</span>);<span class="regexp">//</span>当前类的当前方法名</span><br><span class="line">soutp ---&gt;<span class="constant">System.</span>out.println(<span class="string">"savedInstanceState = ["</span> + savedInstanceState + <span class="string">"]"</span>);<span class="regexp">//</span>这个好，可以打印出当前方法的所有参数列表及其值</span><br><span class="line">soutv ---&gt;<span class="constant">System.</span>out.println(<span class="string">"params"</span>,params);<span class="regexp">//</span>即 你可以输出打印一个变量值</span><br></pre></td></tr></table></figure>
<ul>
<li><h3 id="常规的代码块儿">常规的代码块儿</h3></li>
</ul>
<figure class="highlight nimrod"><table><tr><td class="code"><pre><span class="line"><span class="type">Iteractions</span>---&gt;//快速生成代码块儿</span><br><span class="line">fori ---&gt;<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ; i++) &#123;&#125;</span><br><span class="line">itar ---&gt;<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="type">Array</span>.length; i++) &#123; <span class="type">int</span> i1 = <span class="type">Array</span>[i];&#125;//遍历数组</span><br><span class="line">itco ---&gt;<span class="keyword">for</span> (<span class="type">Iterator</span> <span class="keyword">iterator</span> = collection.<span class="keyword">iterator</span>(); <span class="keyword">iterator</span>.hasNext(); ) &#123;</span><br><span class="line"><span class="type">Object</span> next = <span class="keyword">iterator</span>.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><h3 id="这个是遍历一个容器变量的，直接让容器返回一个iterator进行遍历">这个是遍历一个容器变量的，直接让容器返回一个iterator进行遍历</h3></li>
</ul>
<figure class="highlight nimrod"><table><tr><td class="code"><pre><span class="line">iten ---&gt;<span class="keyword">while</span> (枚举类.hasMoreElements()) &#123; <span class="type">Object</span> nextElement = 枚举类.nextElement(); &#125;//enumeration 是一个枚举类接口来着。遍历枚举内容</span><br><span class="line">iter ---&gt;<span class="keyword">for</span> (<span class="type">int</span> i : <span class="type">FOCUSED_STATE_SET</span>) <span class="decorator">&#123;...&#125;</span>//遍历选中状态下的<span class="type">set</span></span><br><span class="line">itit ---&gt;<span class="keyword">while</span> (<span class="keyword">iterator</span>.hasNext()) &#123; <span class="type">Object</span> next = <span class="keyword">iterator</span>.next(); &#125;//获取到了迭代器对象后，对迭代器进行遍历操作</span><br><span class="line">itli ---&gt;<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123; <span class="type">Object</span> o = list.get(i); &#125;//遍历list对象里面的内容</span><br><span class="line">ritar ---&gt;<span class="keyword">for</span> (<span class="type">int</span> i = <span class="type">Array</span>.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123; <span class="type">int</span> i1 = <span class="type">FOCUSED_STATE_SET</span>[i]; &#125;//倒叙遍历数组</span><br></pre></td></tr></table></figure>
<ul>
<li><h3 id="其他的（综合）">其他的（综合）</h3></li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">geti ---&gt;public <span class="keyword">static</span> MainActivity getInstance() &#123; <span class="keyword">return</span> ; &#125;<span class="comment">//获取到当前的实例 的代码模板</span></span><br><span class="line">ifn ---&gt;if (某变量 == <span class="keyword">null</span>) &#123;....&#125;<span class="comment">//生成if null代码块儿</span></span><br><span class="line">inn ---&gt;if (某变量 != <span class="keyword">null</span>) &#123;....&#125;<span class="comment">//生成if not null代码块儿</span></span><br><span class="line">inst ---&gt;if (<span class="variable">$EXPR</span>$ <span class="keyword">instanceof</span> <span class="variable">$TYPE</span>$) &#123; <span class="variable">$TYPE</span>$ <span class="variable">$VAR1</span>$ = (<span class="variable">$TYPE</span>$)<span class="variable">$EXPR</span>$; <span class="variable">$END</span>$ &#125;<span class="comment">//判断某变量是不是某个类的实例对象</span></span><br><span class="line">lazy ---&gt;if (savedInstanceState == <span class="keyword">null</span>) &#123; savedInstanceState = <span class="keyword">new</span> Bundle(); &#125;<span class="comment">//执行延迟初始化，就是对象直到用的时候才进行初始化操作</span></span><br><span class="line">mn ---&gt;var1 = Math.min(var2,var3);<span class="comment">//得到比较两个变量值小的代码块</span></span><br><span class="line">mx ---&gt;var1 = Math.max(var2,var3);<span class="comment">//得到比较两个变量值大的代码块</span></span><br><span class="line">psvm ---&gt;public <span class="keyword">static</span> void main(String[] args)&#123; 。。。。 &#125;<span class="comment">//生成一个main()函数的代码块</span></span><br><span class="line">toar ---&gt;something.toArray(<span class="keyword">new</span> collection[collection.size()])<span class="comment">//这个是生成一个代码块用于把collection的对象存储到一个数组里面去</span></span><br></pre></td></tr></table></figure>
<ul>
<li><h3 id="普通的代码（修饰符部分的）">普通的代码（修饰符部分的）</h3></li>
</ul>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">psf ---&gt;<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span></span><br><span class="line">psfi ---&gt;<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span></span><br><span class="line">psfs ---&gt;<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span></span><br><span class="line">St ---&gt;<span class="keyword">String</span></span><br><span class="line">thr ---&gt;<span class="keyword">throw</span> <span class="keyword">new</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p><em>Android studio 默认的是按Tab 自动生成代码块的，用户可以自己在setting—&gt;Live Templates里面进行设置expand style</em></p>
<h2 id="下面是一常用的Live_Templates的汇总说明">下面是一常用的Live Templates的汇总说明</h2>]]>
    
    </summary>
    
      <category term="studio" scheme="http://oakzmm.com/tags/studio/"/>
    
      <category term="Android Studio" scheme="http://oakzmm.com/categories/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://oakzmm.com/2015/07/16/hello-world/"/>
    <id>http://oakzmm.com/2015/07/16/hello-world/</id>
    <published>2015-07-16T08:44:36.264Z</published>
    <updated>2015-07-16T08:44:36.264Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.<br>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://oakzmm.com/tags/hexo/"/>
    
      <category term="hexo" scheme="http://oakzmm.com/categories/hexo/"/>
    
  </entry>
  
</feed>