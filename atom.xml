<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Oak_Zmm的技术博客]]></title>
  <subtitle><![CDATA[你信不信，我这都是瞎写的。]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://oakzmm.com//"/>
  <updated>2015-07-22T10:39:19.290Z</updated>
  <id>http://oakzmm.com//</id>
  
  <author>
    <name><![CDATA[Oak_Zmm]]></name>
    <email><![CDATA[macouen@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[使用okHttp、Volley、Gson快速组装HttpClinet]]></title>
    <link href="http://oakzmm.com/2015/07/22/okHttp-Volley-Gson/"/>
    <id>http://oakzmm.com/2015/07/22/okHttp-Volley-Gson/</id>
    <published>2015-07-22T06:24:33.000Z</published>
    <updated>2015-07-22T10:39:19.290Z</updated>
    <content type="html"><![CDATA[<p>什么？你还不知道这3个货什么东西？<br>好吧，请移步这里 <a href="http://www.cnblogs.com/ct2011/p/4001708.html" target="_blank" rel="external">OkHttp使用介绍</a> 、<a href="https://bxbxbai.github.io/2014/09/14/android-working-with-volley/" target="_blank" rel="external">Android库Volley的使用介绍</a> 、 <a href="http://blog.csdn.net/jackie_xiaonan/article/details/14498187" target="_blank" rel="external">GSON使用的学习笔记，入门篇</a> 。 </p>
<h2 id="Foreword">Foreword</h2><ul>
<li><p>这并不是一篇特别有营养的技术博客，对于相关库的使用并没有做深入的解释，因为网上有很多翔实的解析和介绍，我会给出连接。 </p>
</li>
<li><p>服务端返回的是是json格式的数据。使用Android Studio 1.2.2 &amp; Gradle。</p>
</li>
</ul>
<a id="more"></a>
<h2 id="为什么是OKHttp，Volley，Gson_?">为什么是OKHttp，Volley，Gson ?</h2><p>原因有二：<br>一、水平不够，不能自己写出牛逼高效简单易用万人称赞而且代码好看的网络通信模块。<br>二、因为他们的优点。</p>
<p> <code>OKhttp</code>： 如果你看了上面第一篇的Blog，你就会发现OKHttp使用起来方便而且我们不用去考虑<code>HttpURLConnection</code>和<code>HttpClient</code>的那点破事。</p>
<p> <code>Volley</code>: 对于Volley深层次的解析和源码的讲解可以看这里 <a href="http://www.codekk.com/open-source-project-analysis/detail/Android/grumoon/Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90" target="_blank" rel="external">Volley 源码解析</a>（<strong>如果你对Volley了解不多，请务必看下这篇文章</strong>），Volley各种牛逼介绍我就不再重复。</p>
<p>我们看重的是他的优点：“<em>扩展性强，Volley 中大多是基于接口的设计，可配置性强。</em>”。<br> 作为一个强大的CV战士，既然是要动手组装，那么优秀的扩展性，就是必须的了。</p>
<p> <code>Gson</code>: 其实Gson并不是目前来说最好用的Json解析的工具，看图， Gson的解析能力并不是最优秀的，而且据说还有些小坑。但是你要知道Gson的lib只有几百k，另外Android Studio中竟然有GsonFormat的插件，分分中快速生成Model。就是要做快。枪。。手。。。</p>
<p> <img src="/image/okhttp01.jpg" alt=""></p>
<h2 id="怎么组装？">怎么组装？</h2><p>对于Volley，处理Http请求使用的是<code>HttpURLConnection</code>和<code>HttpClient</code> ：</p>
<blockquote>
<p>Android2.3 及以上基于 HttpURLConnection，2.3 以下基于 HttpClient 实现 。</p>
</blockquote>
<p><strong> 显而易见，我们要用OKHttp的底层通信处理来代替Volley的方案。</strong></p>
<p>Volley提供<code>StringRequest</code>和<code>JsonRequest</code>，以及<code>ImageRequest</code>（这里关于Volley Image相关的不作涉及，有需求的请自行改造）。并不能完全满足我们的需求。</p>
<p><strong> 所以我们使用Gson来自定义自己的<code>CustomRequest</code> 。</strong> </p>
<h3 id="1-_添加相关的支持库">1. 添加相关的支持库</h3><pre><code><span class="keyword">compile</span> files(<span class="string">'libs/gson-2.3.1.jar'</span>)
<span class="keyword">compile</span> <span class="string">'com.mcxiaoke.volley:library:1.0.17'</span>
<span class="keyword">compile</span> <span class="string">'com.squareup.okhttp:okhttp:2.4.0'</span>
<span class="keyword">compile</span> <span class="string">'com.squareup.okhttp:okhttp-urlconnection:2.4.0'</span>
<span class="keyword">compile</span> <span class="string">'com.squareup.okio:okio:1.5.0'</span>
</code></pre><h3 id="2-_配置Volley">2. 配置Volley</h3><p>根据官方的<a href="http://developer.android.com/intl/zh-cn/training/volley/requestqueue.html#network" target="_blank" rel="external">Training教程</a> 最基本的我们需要这么写 (很多教程都推荐写到Application中，也是ok的)：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpClientRequest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HttpClientRequest mInstance;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Context mCtx;</span><br><span class="line">    <span class="keyword">public</span> RequestQueue mRequestQueue;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HttpClientRequest</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        mCtx = context;</span><br><span class="line">        mRequestQueue = getRequestQueue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> HttpClientRequest <span class="title">getInstance</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mInstance = <span class="keyword">new</span> HttpClientRequest(context);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="javadoc">/**</span><br><span class="line">     * Returns a Volley request queue for creating network requests</span><br><span class="line">     *</span><br><span class="line">     *<span class="javadoctag"> @return</span> &#123;@link com.android.volley.RequestQueue&#125;</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RequestQueue <span class="title">getRequestQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mRequestQueue == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// getApplicationContext() is key, it keeps you from leaking the</span></span><br><span class="line">            <span class="comment">// Activity or BroadcastReceiver if someone passes one in.</span></span><br><span class="line">            mRequestQueue = Volley.newRequestQueue(mCtx.getApplicationContext());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mRequestQueue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="javadoc">/**</span><br><span class="line">     * Adds a request to the Volley request queue</span><br><span class="line">     *</span><br><span class="line">     *<span class="javadoctag"> @param</span> request is the request to add to the Volley queue</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">addRequest</span><span class="params">(Request&lt;T&gt; request)</span> </span>&#123;</span><br><span class="line">        getRequestQueue().add(request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-_使用OKHttp的底层通信处理来代替Volley的方案">3. 使用OKHttp的底层通信处理来代替Volley的方案</h3><p>这个方案的基础是 <a href="https://android-review.googlesource.com/#/c/59170/" target="_blank" rel="external">Volley支持自定义HttpStack</a> </p>
<blockquote>
<p>Allow custom HttpStack in Volley.newRequestQueue.</p>
<p>Add a variant method that allows the user to pass in<br>an HttpStack to be passed to BasicNetwork. Makes using<br>alternative stacks like OkHttp easier.</p>
</blockquote>
<p>首先这个问题一点都不新鲜，因为很早就有人想这么干了，有人在Stack Overflow提问了这个问题<a href="http://stackoverflow.com/questions/24375043/how-to-implement-android-volley-with-okhttp-2-0/24951835#24951835" target="_blank" rel="external">How to implement Android Volley with OkHttp 2.0?</a>，包括  <a href="https://plus.google.com/+JakeWharton/posts/eJJxhkTQ4yU" target="_blank" rel="external">Jake Wharton 说过可以这么搞 </a> 。</p>
<p>那么现在问题的关键就是怎么搞的问题， 很早 jake大神提出一个方案 <a href="https://gist.github.com/JakeWharton/5616899" target="_blank" rel="external">OkHttpStack.java</a> ，但是随着OKhttp的更新，最初的方法已经不能使用了，逐渐的就有人在使用过程中又了更完善的方案：<br><a href="https://gist.github.com/bryanstern/4e8f1cb5a8e14c202750" target="_blank" rel="external">OkHttpStack.java</a>。看起来不很不错的样子，好就用这个了。</p>
<p><strong> ok，现在把我们的HttpClientRequest中getRequestQueue()方法修改下。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">....</span><br><span class="line"> <span class="javadoc">/**</span><br><span class="line">     * Returns a Volley request queue for creating network requests</span><br><span class="line">     *</span><br><span class="line">     *<span class="javadoctag"> @return</span> &#123;@link com.android.volley.RequestQueue&#125;</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RequestQueue <span class="title">getRequestQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mRequestQueue == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// getApplicationContext() is key, it keeps you from leaking the</span></span><br><span class="line">            <span class="comment">// Activity or BroadcastReceiver if someone passes one in.</span></span><br><span class="line">            <span class="comment">// use  custom okhttpStack, make better work .</span></span><br><span class="line">            mRequestQueue = Volley.newRequestQueue(mCtx.getApplicationContext(),</span><br><span class="line">                    <span class="keyword">new</span> OkHttpStack(<span class="keyword">new</span> OkHttpClient()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mRequestQueue;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h3 id="4-_自定义Request">4. 自定义Request</h3><p>对于这个，官方的 <a href="http://developer.android.com/intl/zh-cn/training/volley/request-custom.html" target="_blank" rel="external">Training教程</a> 是这样的写的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GsonRequest</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Request</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;T&gt; clazz;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, String&gt; headers;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Listener&lt;T&gt; listener;</span><br><span class="line"></span><br><span class="line">    <span class="javadoc">/**</span><br><span class="line">     * Make a GET request and return a parsed object from JSON.</span><br><span class="line">     *</span><br><span class="line">     *<span class="javadoctag"> @param</span> url URL of the request to make</span><br><span class="line">     *<span class="javadoctag"> @param</span> clazz Relevant class object, for Gson's reflection</span><br><span class="line">     *<span class="javadoctag"> @param</span> headers Map of request headers</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GsonRequest</span><span class="params">(String url, Class&lt;T&gt; clazz, Map&lt;String, String&gt; headers,</span><br><span class="line">            Listener&lt;T&gt; listener, ErrorListener errorListener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Method.GET, url, errorListener);</span><br><span class="line">        <span class="keyword">this</span>.clazz = clazz;</span><br><span class="line">        <span class="keyword">this</span>.headers = headers;</span><br><span class="line">        <span class="keyword">this</span>.listener = listener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; getHeaders() <span class="keyword">throws</span> AuthFailureError &#123;</span><br><span class="line">        <span class="keyword">return</span> headers != <span class="keyword">null</span> ? headers : <span class="keyword">super</span>.getHeaders();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">deliverResponse</span><span class="params">(T response)</span> </span>&#123;</span><br><span class="line">        listener.onResponse(response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Response&lt;T&gt; <span class="title">parseNetworkResponse</span><span class="params">(NetworkResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String json = <span class="keyword">new</span> String(</span><br><span class="line">                    response.data,</span><br><span class="line">                    HttpHeaderParser.parseCharset(response.headers));</span><br><span class="line">            <span class="keyword">return</span> Response.success(</span><br><span class="line">                    gson.fromJson(json, clazz),</span><br><span class="line">                    HttpHeaderParser.parseCacheHeaders(response));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> Response.error(<span class="keyword">new</span> ParseError(e));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonSyntaxException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> Response.error(<span class="keyword">new</span> ParseError(e));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个Request对付基本的也就够用了，但是在使用过程中，发现一些问题，Volley竟然没有提供设置POST参数的方法，但是当发出POST请求的时候，Volley会尝试调用Request中的getParams()方法来获取POST参数。ok，改一下，添加下getParams()方法，再来个构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line">   <span class="javadoc">/**</span><br><span class="line">   * Make a request and return a parsed object from JSON.</span><br><span class="line">   *</span><br><span class="line">   *<span class="javadoctag"> @param</span> url     URL of the request to make</span><br><span class="line">   *<span class="javadoctag"> @param</span> clazz   Relevant class object, for Gson's reflection</span><br><span class="line">   *<span class="javadoctag"> @param</span> headers Map of request headers</span><br><span class="line">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">CustomRequest</span><span class="params">(<span class="keyword">int</span> method, String url, Class&lt;T&gt; clazz, Map&lt;String, String&gt; headers,</span><br><span class="line">                       Map&lt;String, String&gt; params,</span><br><span class="line">                       Response.Listener&lt;T&gt; listener, Response.ErrorListener errorListener)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>(method, url, errorListener);</span><br><span class="line">      <span class="keyword">this</span>.clazz = clazz;</span><br><span class="line">      <span class="keyword">this</span>.headers = headers;</span><br><span class="line">      <span class="keyword">this</span>.params = params;</span><br><span class="line">      <span class="keyword">this</span>.listener = listener;</span><br><span class="line">  &#125;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> Map&lt;String, String&gt; getParams() <span class="keyword">throws</span> AuthFailureError &#123;</span><br><span class="line">      <span class="keyword">return</span> params != <span class="keyword">null</span> ? params : <span class="keyword">super</span>.getParams();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>但是这样用起来还是不太爽，因为我要用时候需要在activity里new这个Request，这样看起来代码并不好看。我想放到HttpClientRequest中，封装起来。但是如果我想同时设置 <code>method</code> 、<code>url</code> 、<code>class</code>、 <code>headers</code>、 <code>params</code> 还有<code>listner</code>等等。代码还是不怎么不好看不说，好像用起来也不太方便，扩展也不太好。我参考了下okhttp是这样写的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">      .url(url)</span><br><span class="line">      .post(body)</span><br><span class="line">      .build();</span><br></pre></td></tr></table></figure>
<p>好像很不错的样子，我们也根据自己的需求这样搞一下,</p>
<p>最后我们成形的CustomRequest就是这样了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">**</span><br><span class="line"> * MyApplication</span><br><span class="line"> * Created by acer_april</span><br><span class="line"> * on <span class="number">2015</span>/<span class="number">7</span>/<span class="number">20</span></span><br><span class="line"> * Description: customVolleyRequest</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomRequest</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Request</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;T&gt; clazz;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, String&gt; headers;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Response.Listener&lt;T&gt; listener;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; params;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="javadoc">/**</span><br><span class="line">     * Make a GET request and return a parsed object from JSON.</span><br><span class="line">     *</span><br><span class="line">     *<span class="javadoctag"> @param</span> url    URL of the request to make</span><br><span class="line">     *<span class="javadoctag"> @param</span> clazz  Relevant class object, for Gson's reflection</span><br><span class="line">     *<span class="javadoctag"> @param</span> params Map of request params</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomRequest</span><span class="params">(String url, Class&lt;T&gt; clazz, Map&lt;String, String&gt; params,</span><br><span class="line">                         Response.Listener&lt;T&gt; listener, Response.ErrorListener errorListener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Method.GET, url, errorListener);</span><br><span class="line">        <span class="keyword">this</span>.clazz = clazz;</span><br><span class="line">        <span class="keyword">this</span>.headers = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.params = params;</span><br><span class="line">        <span class="keyword">this</span>.listener = listener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="javadoc">/**</span><br><span class="line">     * Make a request and return a parsed object from JSON.</span><br><span class="line">     *</span><br><span class="line">     *<span class="javadoctag"> @param</span> url     URL of the request to make</span><br><span class="line">     *<span class="javadoctag"> @param</span> clazz   Relevant class object, for Gson's reflection</span><br><span class="line">     *<span class="javadoctag"> @param</span> headers Map of request headers</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomRequest</span><span class="params">(<span class="keyword">int</span> method, String url, Class&lt;T&gt; clazz, Map&lt;String, String&gt; headers,</span><br><span class="line">                         Map&lt;String, String&gt; params,</span><br><span class="line">                         Response.Listener&lt;T&gt; listener, Response.ErrorListener errorListener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(method, url, errorListener);</span><br><span class="line">        <span class="keyword">this</span>.clazz = clazz;</span><br><span class="line">        <span class="keyword">this</span>.headers = headers;</span><br><span class="line">        <span class="keyword">this</span>.params = params;</span><br><span class="line">        <span class="keyword">this</span>.listener = listener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="javadoc">/**</span><br><span class="line">     *<span class="javadoctag"> @param</span> builder requestBuilder</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomRequest</span><span class="params">(RequestBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(builder.method, builder.url, builder.errorListener);</span><br><span class="line">        clazz = builder.clazz;</span><br><span class="line">        headers = builder.headers;</span><br><span class="line">        listener = builder.successListener;</span><br><span class="line">        params = builder.params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; getHeaders() <span class="keyword">throws</span> AuthFailureError &#123;</span><br><span class="line">        <span class="keyword">return</span> headers != <span class="keyword">null</span> ? headers : <span class="keyword">super</span>.getHeaders();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Map&lt;String, String&gt; getParams() <span class="keyword">throws</span> AuthFailureError &#123;</span><br><span class="line">        <span class="keyword">return</span> params != <span class="keyword">null</span> ? params : <span class="keyword">super</span>.getParams();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">deliverResponse</span><span class="params">(T response)</span> </span>&#123;</span><br><span class="line">        listener.onResponse(response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Response&lt;T&gt; <span class="title">parseNetworkResponse</span><span class="params">(NetworkResponse response)</span> </span>&#123;</span><br><span class="line">        String parsed;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            parsed = <span class="keyword">new</span> String(response.data, HttpHeaderParser.parseCharset(response.headers));</span><br><span class="line">            <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> (Response&lt;T&gt;) Response.success(parsed,</span><br><span class="line">                        HttpHeaderParser.parseCacheHeaders(response));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Response.success(gson.fromJson(parsed, clazz),</span><br><span class="line">                        HttpHeaderParser.parseCacheHeaders(response));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> Response.error(<span class="keyword">new</span> ParseError(e));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonSyntaxException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> Response.error(<span class="keyword">new</span> ParseError(e));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> Response.error(<span class="keyword">new</span> ParseError(e));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="javadoc">/**</span><br><span class="line">     * requestBiulder  使用方法参见httpClientRequest</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestBuilder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> method = Method.GET;</span><br><span class="line">        <span class="keyword">private</span> String url;</span><br><span class="line">        <span class="keyword">private</span> Class clazz;</span><br><span class="line">        <span class="keyword">private</span> Response.Listener successListener;</span><br><span class="line">        <span class="keyword">private</span> Response.ErrorListener errorListener;</span><br><span class="line">        <span class="keyword">private</span> Map&lt;String, String&gt; headers;</span><br><span class="line">        <span class="keyword">private</span> Map&lt;String, String&gt; params;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RequestBuilder <span class="title">url</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.url = url;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RequestBuilder <span class="title">clazz</span><span class="params">(Class clazz)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.clazz = clazz;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RequestBuilder <span class="title">successListener</span><span class="params">(Response.Listener successListener)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.successListener = successListener;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RequestBuilder <span class="title">errorListener</span><span class="params">(Response.ErrorListener errorListener)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.errorListener = errorListener;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RequestBuilder <span class="title">post</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.method = Method.POST;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RequestBuilder <span class="title">method</span><span class="params">(<span class="keyword">int</span> method)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.method = method;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RequestBuilder <span class="title">addHeader</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (headers == <span class="keyword">null</span>)</span><br><span class="line">                headers = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            headers.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RequestBuilder <span class="title">headers</span><span class="params">(Map&lt;String, String&gt; headers)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.headers = headers;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RequestBuilder <span class="title">params</span><span class="params">(Map&lt;String, String&gt; params)</span> </span>&#123;</span><br><span class="line">            post();</span><br><span class="line">            <span class="keyword">this</span>.params = params;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RequestBuilder <span class="title">addParams</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (params == <span class="keyword">null</span>) &#123;</span><br><span class="line">                params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                post();</span><br><span class="line">            &#125;</span><br><span class="line">            params.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RequestBuilder <span class="title">addMethodParams</span><span class="params">(String method)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (params == <span class="keyword">null</span>) &#123;</span><br><span class="line">                params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                post();</span><br><span class="line">            &#125;</span><br><span class="line">            params.put(<span class="string">"method"</span>, method);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> CustomRequest <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CustomRequest(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>封装方法的时候这样写，另外加上取消请求的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">	 <span class="javadoc">/**</span><br><span class="line">     * Returns a Volley request queue for creating network requests</span><br><span class="line">     *</span><br><span class="line">     *<span class="javadoctag"> @return</span> &#123;@link com.android.volley.RequestQueue&#125;</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RequestQueue <span class="title">getRequestQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mRequestQueue == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// getApplicationContext() is key, it keeps you from leaking the</span></span><br><span class="line">            <span class="comment">// Activity or BroadcastReceiver if someone passes one in.</span></span><br><span class="line">            <span class="comment">// use  custom okhttpStack, make better work .</span></span><br><span class="line">            mRequestQueue = Volley.newRequestQueue(mCtx.getApplicationContext(),</span><br><span class="line">                    <span class="keyword">new</span> OkHttpStack(<span class="keyword">new</span> OkHttpClient()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mRequestQueue;</span><br><span class="line">    &#125;</span><br><span class="line">     * Adds a request to the Volley request queue</span><br><span class="line">     *</span><br><span class="line">     * <span class="annotation">@param</span> request is the request to add to the Volley queue</span><br><span class="line">     */</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">addRequest</span><span class="params">(Request&lt;T&gt; request)</span> </span>&#123;</span><br><span class="line">        getRequestQueue().add(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="javadoc">/**</span><br><span class="line">     * Adds a request to the Volley request queue</span><br><span class="line">     *</span><br><span class="line">     *<span class="javadoctag"> @param</span> request is the request to add to the Volley queuest</span><br><span class="line">     *<span class="javadoctag"> @param</span> tag is the tag identifying the request</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">addRequest</span><span class="params">(Request&lt;T&gt; request, String tag)</span> </span>&#123;</span><br><span class="line">        request.setTag(tag);</span><br><span class="line">        getRequestQueue().add(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="javadoc">/**</span><br><span class="line">     * 使用和参数配置范例</span><br><span class="line">     *</span><br><span class="line">     *<span class="javadoctag"> @param</span> param1</span><br><span class="line">     *<span class="javadoctag"> @param</span> param2</span><br><span class="line">     *<span class="javadoctag"> @param</span> listener</span><br><span class="line">     *<span class="javadoctag"> @param</span> errorListener</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getDemoData</span><span class="params">(String param1,</span><br><span class="line">                            String param2,</span><br><span class="line">                            Response.Listener listener,</span><br><span class="line">                            Response.ErrorListener errorListener,String tag)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        params.put(<span class="string">"param1"</span>, param1);</span><br><span class="line">        params.put(<span class="string">"param2"</span>, param2);</span><br><span class="line"></span><br><span class="line">        CustomRequest request = <span class="keyword">new</span> CustomRequest.RequestBuilder()</span><br><span class="line"><span class="comment">//                .post()//不设置的话默认GET 但是设置了参数就不需要了。。。</span></span><br><span class="line">                .url(<span class="string">""</span>)<span class="comment">//url会统一配置到requestUrl类中 </span></span><br><span class="line">                .addMethodParams(<span class="string">""</span>) <span class="comment">//请求的方法名</span></span><br><span class="line">                        <span class="comment">// 添加参数方法1 适用参数比较多的情况下</span></span><br><span class="line"><span class="comment">//                .params(params)</span></span><br><span class="line">                        <span class="comment">// 添加参数方法2</span></span><br><span class="line">                .addParams(<span class="string">"param1"</span>, param1)<span class="comment">//添加参数1</span></span><br><span class="line">                .addParams(<span class="string">"param2"</span>, param2)<span class="comment">//添加参数2</span></span><br><span class="line"><span class="comment">//                .clazz(Test.calss) //如果设置了返回类型，会自动解析返回model 如果不设置会直接返回json数据;</span></span><br><span class="line">                .successListener(listener)<span class="comment">//获取数据成功的listener</span></span><br><span class="line">                .errorListener(errorListener)<span class="comment">//获取数据异常的listener</span></span><br><span class="line">                .build();</span><br><span class="line">        addRequest(request,tag);</span><br><span class="line">        <span class="comment">//将请求add到队列中。并设置tag  并需要相应activity onStop方法中调用cancel方法</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>ok，大功告成，组装完毕。</p>
<h2 id="参考资料">参考资料</h2><ul>
<li><a href="http://www.cnblogs.com/ct2011/p/4001708.html" target="_blank" rel="external">OkHttp使用介绍</a> </li>
<li><a href="https://bxbxbai.github.io/2014/09/14/android-working-with-volley/" target="_blank" rel="external">Android库Volley的使用介绍</a> </li>
<li><a href="http://blog.csdn.net/guolin_blog/article/details/17482095" target="_blank" rel="external">Android Volley完全解析</a></li>
<li><a href="http://www.codekk.com/open-source-project-analysis/detail/Android/grumoon/Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90" target="_blank" rel="external">Volley 源码解析</a></li>
<li><a href="http://blog.csdn.net/jackie_xiaonan/article/details/14498187" target="_blank" rel="external">GSON使用的学习笔记，入门篇</a> </li>
<li><a href="https://medium.com/@sotti/android-networking-i-okhttp-volley-and-gson-72004efff196" target="_blank" rel="external">Android Networking I: OkHttp, Volley and Gson</a></li>
</ul>
<h2 id="声明">声明</h2><ol>
<li>由于互联网数据的分享性，如果我发表的文章，来源于您的原创文章，且我没有注明，请<a href="http://weibo.com/minter01" target="_blank" rel="external">微博私信</a>或者邮件macouen@gmail.com说明。 </li>
<li>欢迎转载，但请注明文章原始出处。 </li>
</ol>
<p>作者：Oak_Zmm<br>出处：<a href="http://oakzmm.com/" target="_blank" rel="external">http://oakzmm.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>什么？你还不知道这3个货什么东西？<br>好吧，请移步这里 <a href="http://www.cnblogs.com/ct2011/p/4001708.html">OkHttp使用介绍</a> 、<a href="https://bxbxbai.github.io/2014/09/14/android-working-with-volley/">Android库Volley的使用介绍</a> 、 <a href="http://blog.csdn.net/jackie_xiaonan/article/details/14498187">GSON使用的学习笔记，入门篇</a> 。 </p>
<h2 id="Foreword">Foreword</h2><ul>
<li><p>这并不是一篇特别有营养的技术博客，对于相关库的使用并没有做深入的解释，因为网上有很多翔实的解析和介绍，我会给出连接。 </p>
</li>
<li><p>服务端返回的是是json格式的数据。使用Android Studio 1.2.2 &amp; Gradle。</p>
</li>
</ul>]]>
    
    </summary>
    
      <category term="http" scheme="http://oakzmm.com/tags/http/"/>
    
      <category term="Android" scheme="http://oakzmm.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[常用的Android studio的live templates汇总]]></title>
    <link href="http://oakzmm.com/2015/07/16/live-templates/"/>
    <id>http://oakzmm.com/2015/07/16/live-templates/</id>
    <published>2015-07-16T08:47:27.000Z</published>
    <updated>2015-07-16T08:53:52.736Z</updated>
    <content type="html"><![CDATA[<p><em>Android studio 默认的是按Tab 自动生成代码块的，用户可以自己在setting—&gt;Live Templates里面进行设置expand style</em></p>
<h2 id="下面是一常用的Live_Templates的汇总说明">下面是一常用的Live Templates的汇总说明</h2><a id="more"></a>
<ul>
<li><h4 id="输出打印_Groovy(常规部分)">输出打印  Groovy(常规部分)</h4></li>
</ul>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">serr ---&gt;<span class="constant">System.</span>err.println(<span class="string">"example"</span>)</span><br><span class="line">souf ---&gt;printf <span class="string">"example"</span></span><br><span class="line">sout ---&gt;println <span class="string">"example"</span></span><br><span class="line">soutm ---&gt;<span class="constant">System.</span>out.println(<span class="string">"MainActivity.onCreate"</span>);<span class="regexp">//</span>当前类的当前方法名</span><br><span class="line">soutp ---&gt;<span class="constant">System.</span>out.println(<span class="string">"savedInstanceState = ["</span> + savedInstanceState + <span class="string">"]"</span>);<span class="regexp">//</span>这个好，可以打印出当前方法的所有参数列表及其值</span><br><span class="line">soutv ---&gt;<span class="constant">System.</span>out.println(<span class="string">"params"</span>,params);<span class="regexp">//</span>即 你可以输出打印一个变量值</span><br></pre></td></tr></table></figure>
<ul>
<li><h4 id="常规的代码块儿">常规的代码块儿</h4></li>
</ul>
<figure class="highlight nimrod"><table><tr><td class="code"><pre><span class="line"><span class="type">Iteractions</span>---&gt;//快速生成代码块儿</span><br><span class="line">fori ---&gt;<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ; i++) &#123;&#125;</span><br><span class="line">itar ---&gt;<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="type">Array</span>.length; i++) &#123; <span class="type">int</span> i1 = <span class="type">Array</span>[i];&#125;//遍历数组</span><br><span class="line">itco ---&gt;<span class="keyword">for</span> (<span class="type">Iterator</span> <span class="keyword">iterator</span> = collection.<span class="keyword">iterator</span>(); <span class="keyword">iterator</span>.hasNext(); ) &#123;</span><br><span class="line"><span class="type">Object</span> next = <span class="keyword">iterator</span>.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><h4 id="这个是遍历一个容器变量的，直接让容器返回一个iterator进行遍历">这个是遍历一个容器变量的，直接让容器返回一个iterator进行遍历</h4></li>
</ul>
<figure class="highlight nimrod"><table><tr><td class="code"><pre><span class="line">iten ---&gt;<span class="keyword">while</span> (枚举类.hasMoreElements()) &#123; <span class="type">Object</span> nextElement = 枚举类.nextElement(); &#125;//enumeration 是一个枚举类接口来着。遍历枚举内容</span><br><span class="line">iter ---&gt;<span class="keyword">for</span> (<span class="type">int</span> i : <span class="type">FOCUSED_STATE_SET</span>) <span class="decorator">&#123;...&#125;</span>//遍历选中状态下的<span class="type">set</span></span><br><span class="line">itit ---&gt;<span class="keyword">while</span> (<span class="keyword">iterator</span>.hasNext()) &#123; <span class="type">Object</span> next = <span class="keyword">iterator</span>.next(); &#125;//获取到了迭代器对象后，对迭代器进行遍历操作</span><br><span class="line">itli ---&gt;<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123; <span class="type">Object</span> o = list.get(i); &#125;//遍历list对象里面的内容</span><br><span class="line">ritar ---&gt;<span class="keyword">for</span> (<span class="type">int</span> i = <span class="type">Array</span>.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123; <span class="type">int</span> i1 = <span class="type">FOCUSED_STATE_SET</span>[i]; &#125;//倒叙遍历数组</span><br></pre></td></tr></table></figure>
<ul>
<li><h4 id="其他的（综合）">其他的（综合）</h4></li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">geti ---&gt;public <span class="keyword">static</span> MainActivity getInstance() &#123; <span class="keyword">return</span> ; &#125;<span class="comment">//获取到当前的实例 的代码模板</span></span><br><span class="line">ifn ---&gt;if (某变量 == <span class="keyword">null</span>) &#123;....&#125;<span class="comment">//生成if null代码块儿</span></span><br><span class="line">inn ---&gt;if (某变量 != <span class="keyword">null</span>) &#123;....&#125;<span class="comment">//生成if not null代码块儿</span></span><br><span class="line">inst ---&gt;if (<span class="variable">$EXPR</span>$ <span class="keyword">instanceof</span> <span class="variable">$TYPE</span>$) &#123; <span class="variable">$TYPE</span>$ <span class="variable">$VAR1</span>$ = (<span class="variable">$TYPE</span>$)<span class="variable">$EXPR</span>$; <span class="variable">$END</span>$ &#125;<span class="comment">//判断某变量是不是某个类的实例对象</span></span><br><span class="line">lazy ---&gt;if (savedInstanceState == <span class="keyword">null</span>) &#123; savedInstanceState = <span class="keyword">new</span> Bundle(); &#125;<span class="comment">//执行延迟初始化，就是对象直到用的时候才进行初始化操作</span></span><br><span class="line">mn ---&gt;var1 = Math.min(var2,var3);<span class="comment">//得到比较两个变量值小的代码块</span></span><br><span class="line">mx ---&gt;var1 = Math.max(var2,var3);<span class="comment">//得到比较两个变量值大的代码块</span></span><br><span class="line">psvm ---&gt;public <span class="keyword">static</span> void main(String[] args)&#123; 。。。。 &#125;<span class="comment">//生成一个main()函数的代码块</span></span><br><span class="line">toar ---&gt;something.toArray(<span class="keyword">new</span> collection[collection.size()])<span class="comment">//这个是生成一个代码块用于把collection的对象存储到一个数组里面去</span></span><br></pre></td></tr></table></figure>
<ul>
<li><h4 id="普通的代码（修饰符部分的）">普通的代码（修饰符部分的）</h4></li>
</ul>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">psf ---&gt;<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span></span><br><span class="line">psfi ---&gt;<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span></span><br><span class="line">psfs ---&gt;<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span></span><br><span class="line">St ---&gt;<span class="keyword">String</span></span><br><span class="line">thr ---&gt;<span class="keyword">throw</span> <span class="keyword">new</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p><em>Android studio 默认的是按Tab 自动生成代码块的，用户可以自己在setting—&gt;Live Templates里面进行设置expand style</em></p>
<h2 id="下面是一常用的Live_Templates的汇总说明">下面是一常用的Live Templates的汇总说明</h2>]]>
    
    </summary>
    
      <category term="studio" scheme="http://oakzmm.com/tags/studio/"/>
    
      <category term="Android Studio" scheme="http://oakzmm.com/categories/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://oakzmm.com/2015/07/16/hello-world/"/>
    <id>http://oakzmm.com/2015/07/16/hello-world/</id>
    <published>2015-07-16T08:44:36.264Z</published>
    <updated>2015-07-16T08:44:36.264Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.<br>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://oakzmm.com/tags/hexo/"/>
    
      <category term="hexo" scheme="http://oakzmm.com/categories/hexo/"/>
    
  </entry>
  
</feed>